//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\I525976\source\repos\HexRuntimeAssemblier\HexRuntimeAssemblier\.antlr\Assemblier.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Assemblier : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COLON=2, LBRACE=3, RBRACE=4, LMID=5, RMID=6, BODY_BEGIN=7, BODY_END=8, 
		PARAM_BEGIN=9, PARAM_END=10, EQ=11, DOT=12, COMMA=13, REF=14, JUNCTION=15, 
		KEY_ASSEMBLY=16, KEY_CLASS=17, KEY_METHOD=18, KEY_PROPERTY=19, KEY_INHERIT=20, 
		KEY_IMPLEMENT=21, MODIFIER_ACCESS=22, MODIFIER_LIFE=23, MODIFIER_STATIC=24, 
		MODIFIER_INSTANCE=25, MODIFIER_NEST=26, MODIFIER_PUBLIC=27, MODIFIER_PRIVATE=28, 
		MODIFIER_INTERNAL=29, MODIFIER_PROTECTED=30, CTOR=31, ARRAY=32, VOID=33, 
		PRIMITIVE_TYPE=34, PRIMITIVE_INT=35, PRIMITIVE_LONG=36, PRIMITIVE_SHORT=37, 
		PRIMITIVE_BYTE=38, PRIMITIVE_CHAR=39, PRIMITIVE_STRING=40, METHOD_MANAGED=41, 
		METHOD_IMPORT=42, METHOD_LOCAL=43, METHOD_CODE=44, PROPERTY_GET=45, PROPERTY_SET=46, 
		METHOD_PROPERTY=47, STRING=48, HEX=49, NUMBER=50, INT=51, GUID=52, IDENTIFIER=53;
	public const int
		RULE_start = 0, RULE_methodArgument = 1, RULE_methodArgumentList = 2, 
		RULE_methodReturnType = 3, RULE_methodName = 4, RULE_methodImport = 5, 
		RULE_methodSource = 6, RULE_methodLocal = 7, RULE_methodLocals = 8, RULE_methodCode = 9, 
		RULE_methodIl = 10, RULE_methodOpcodeOperand = 11, RULE_methodBody = 12, 
		RULE_methodDef = 13, RULE_methodRef = 14, RULE_fieldDef = 15, RULE_fieldRef = 16, 
		RULE_propertyGet = 17, RULE_propertySet = 18, RULE_propertyDef = 19, RULE_typeRefList = 20, 
		RULE_implementList = 21, RULE_type = 22, RULE_typeArray = 23, RULE_typeNestArray = 24, 
		RULE_typeMultidimensionArray = 25, RULE_typeInteriorRef = 26, RULE_typeRef = 27, 
		RULE_typeName = 28, RULE_classBody = 29, RULE_classDef = 30, RULE_propertyValue = 31, 
		RULE_propertyKey = 32, RULE_property = 33, RULE_assemblyDef = 34;
	public static readonly string[] ruleNames = {
		"start", "methodArgument", "methodArgumentList", "methodReturnType", "methodName", 
		"methodImport", "methodSource", "methodLocal", "methodLocals", "methodCode", 
		"methodIl", "methodOpcodeOperand", "methodBody", "methodDef", "methodRef", 
		"fieldDef", "fieldRef", "propertyGet", "propertySet", "propertyDef", "typeRefList", 
		"implementList", "type", "typeArray", "typeNestArray", "typeMultidimensionArray", 
		"typeInteriorRef", "typeRef", "typeName", "classBody", "classDef", "propertyValue", 
		"propertyKey", "property", "assemblyDef"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
		"'='", "'.'", "','", "'&'", "'::'", "'.assembly'", "'.class'", "'.method'", 
		"'.property'", "'inherits'", "'implements'", null, null, "'static'", "'instance'", 
		"'nested'", "'public'", "'private'", "'internal'", "'protected'", null, 
		"'array'", "'void'", null, "'int32'", "'int64'", "'int16'", "'int8'", 
		"'char'", "'string'", "'managed'", "'import'", "'.local'", "'.code'", 
		"'.get'", "'.set'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COLON", "LBRACE", "RBRACE", "LMID", "RMID", "BODY_BEGIN", 
		"BODY_END", "PARAM_BEGIN", "PARAM_END", "EQ", "DOT", "COMMA", "REF", "JUNCTION", 
		"KEY_ASSEMBLY", "KEY_CLASS", "KEY_METHOD", "KEY_PROPERTY", "KEY_INHERIT", 
		"KEY_IMPLEMENT", "MODIFIER_ACCESS", "MODIFIER_LIFE", "MODIFIER_STATIC", 
		"MODIFIER_INSTANCE", "MODIFIER_NEST", "MODIFIER_PUBLIC", "MODIFIER_PRIVATE", 
		"MODIFIER_INTERNAL", "MODIFIER_PROTECTED", "CTOR", "ARRAY", "VOID", "PRIMITIVE_TYPE", 
		"PRIMITIVE_INT", "PRIMITIVE_LONG", "PRIMITIVE_SHORT", "PRIMITIVE_BYTE", 
		"PRIMITIVE_CHAR", "PRIMITIVE_STRING", "METHOD_MANAGED", "METHOD_IMPORT", 
		"METHOD_LOCAL", "METHOD_CODE", "PROPERTY_GET", "PROPERTY_SET", "METHOD_PROPERTY", 
		"STRING", "HEX", "NUMBER", "INT", "GUID", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assemblier.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Assemblier() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Assemblier(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Assemblier(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public AssemblyDefContext assemblyDef() {
			return GetRuleContext<AssemblyDefContext>(0);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; assemblyDef();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY_CLASS) {
				{
				{
				State = 71; classDef();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 2, RULE_methodArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; type();
			State = 78; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentListContext : ParserRuleContext {
		public MethodArgumentContext methodArgument() {
			return GetRuleContext<MethodArgumentContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public MethodArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentListContext methodArgumentList() {
		MethodArgumentListContext _localctx = new MethodArgumentListContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodArgumentList);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LMID:
			case ARRAY:
			case PRIMITIVE_TYPE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 80; methodArgument();
				State = 81; Match(COMMA);
				State = 82; methodArgumentList();
				}
				}
				break;
			case PARAM_END:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReturnTypeContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(Assemblier.VOID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReturnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReturnTypeContext methodReturnType() {
		MethodReturnTypeContext _localctx = new MethodReturnTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodReturnType);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(VOID);
				}
				break;
			case LMID:
			case ARRAY:
			case PRIMITIVE_TYPE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode CTOR() { return GetToken(Assemblier.CTOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = TokenStream.LA(1);
			if ( !(_la==CTOR || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodImportContext : ParserRuleContext {
		public ITerminalNode METHOD_IMPORT() { return GetToken(Assemblier.METHOD_IMPORT, 0); }
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode[] STRING() { return GetTokens(Assemblier.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(Assemblier.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public MethodImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodImportContext methodImport() {
		MethodImportContext _localctx = new MethodImportContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(METHOD_IMPORT);
			State = 94; Match(LMID);
			State = 95; Match(STRING);
			State = 96; Match(COMMA);
			State = 97; Match(STRING);
			State = 98; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSourceContext : ParserRuleContext {
		public ITerminalNode METHOD_MANAGED() { return GetToken(Assemblier.METHOD_MANAGED, 0); }
		public MethodImportContext methodImport() {
			return GetRuleContext<MethodImportContext>(0);
		}
		public MethodSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSourceContext methodSource() {
		MethodSourceContext _localctx = new MethodSourceContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodSource);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case METHOD_MANAGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; Match(METHOD_MANAGED);
				}
				break;
			case METHOD_IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; methodImport();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalContext : ParserRuleContext {
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalContext methodLocal() {
		MethodLocalContext _localctx = new MethodLocalContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(LMID);
			State = 105; Match(INT);
			State = 106; Match(RMID);
			State = 107; type();
			State = 108; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalsContext : ParserRuleContext {
		public ITerminalNode METHOD_LOCAL() { return GetToken(Assemblier.METHOD_LOCAL, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodLocalContext[] methodLocal() {
			return GetRuleContexts<MethodLocalContext>();
		}
		public MethodLocalContext methodLocal(int i) {
			return GetRuleContext<MethodLocalContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(Assemblier.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(Assemblier.COLON, i);
		}
		public MethodLocalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalsContext methodLocals() {
		MethodLocalsContext _localctx = new MethodLocalsContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodLocals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(METHOD_LOCAL);
			State = 111; Match(BODY_BEGIN);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 112; methodLocal();
				State = 113; Match(COLON);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LMID );
			State = 119; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCodeContext : ParserRuleContext {
		public ITerminalNode METHOD_CODE() { return GetToken(Assemblier.METHOD_CODE, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodIlContext[] methodIl() {
			return GetRuleContexts<MethodIlContext>();
		}
		public MethodIlContext methodIl(int i) {
			return GetRuleContext<MethodIlContext>(i);
		}
		public MethodCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCodeContext methodCode() {
		MethodCodeContext _localctx = new MethodCodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(METHOD_CODE);
			State = 122; Match(BODY_BEGIN);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 123; methodIl();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOT );
			State = 128; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodIlContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Assemblier.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodOpcodeOperandContext[] methodOpcodeOperand() {
			return GetRuleContexts<MethodOpcodeOperandContext>();
		}
		public MethodOpcodeOperandContext methodOpcodeOperand(int i) {
			return GetRuleContext<MethodOpcodeOperandContext>(i);
		}
		public MethodIlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodIl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodIl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodIl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodIl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodIlContext methodIl() {
		MethodIlContext _localctx = new MethodIlContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodIl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(DOT);
			State = 131; Match(IDENTIFIER);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << ARRAY) | (1L << VOID) | (1L << PRIMITIVE_TYPE) | (1L << STRING) | (1L << HEX) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 132; methodOpcodeOperand();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOpcodeOperandContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MethodOpcodeOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOpcodeOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodOpcodeOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodOpcodeOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOpcodeOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOpcodeOperandContext methodOpcodeOperand() {
		MethodOpcodeOperandContext _localctx = new MethodOpcodeOperandContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodOpcodeOperand);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; Match(HEX);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 141; methodRef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 142; fieldRef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 143; type();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 144; typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodCodeContext methodCode() {
			return GetRuleContext<MethodCodeContext>(0);
		}
		public MethodLocalsContext methodLocals() {
			return GetRuleContext<MethodLocalsContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==METHOD_LOCAL) {
				{
				State = 147; methodLocals();
				}
			}

			State = 150; methodCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		public ITerminalNode KEY_METHOD() { return GetToken(Assemblier.KEY_METHOD, 0); }
		public ITerminalNode MODIFIER_ACCESS() { return GetToken(Assemblier.MODIFIER_ACCESS, 0); }
		public ITerminalNode MODIFIER_LIFE() { return GetToken(Assemblier.MODIFIER_LIFE, 0); }
		public MethodReturnTypeContext methodReturnType() {
			return GetRuleContext<MethodReturnTypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public MethodSourceContext methodSource() {
			return GetRuleContext<MethodSourceContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public ITerminalNode METHOD_PROPERTY() { return GetToken(Assemblier.METHOD_PROPERTY, 0); }
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(KEY_METHOD);
			State = 153; Match(MODIFIER_ACCESS);
			State = 154; Match(MODIFIER_LIFE);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==METHOD_PROPERTY) {
				{
				State = 155; Match(METHOD_PROPERTY);
				}
			}

			State = 158; methodReturnType();
			State = 159; methodName();
			State = 160; Match(PARAM_BEGIN);
			State = 161; methodArgumentList();
			State = 162; Match(PARAM_END);
			State = 163; methodSource();
			State = 164; Match(BODY_BEGIN);
			State = 165; methodBody();
			State = 166; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodRefContext : ParserRuleContext {
		public MethodReturnTypeContext methodReturnType() {
			return GetRuleContext<MethodReturnTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public MethodRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodRefContext methodRef() {
		MethodRefContext _localctx = new MethodRefContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; methodReturnType();
			State = 169; typeRef();
			State = 170; Match(JUNCTION);
			State = 171; methodName();
			State = 172; Match(PARAM_BEGIN);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << ARRAY) | (1L << PRIMITIVE_TYPE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 173; type();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179; Match(PARAM_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefContext : ParserRuleContext {
		public ITerminalNode MODIFIER_ACCESS() { return GetToken(Assemblier.MODIFIER_ACCESS, 0); }
		public ITerminalNode MODIFIER_LIFE() { return GetToken(Assemblier.MODIFIER_LIFE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public FieldDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefContext fieldDef() {
		FieldDefContext _localctx = new FieldDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_fieldDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(MODIFIER_ACCESS);
			State = 182; Match(MODIFIER_LIFE);
			State = 183; type();
			State = 184; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldRefContext : ParserRuleContext {
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public FieldRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldRefContext fieldRef() {
		FieldRefContext _localctx = new FieldRefContext(Context, State);
		EnterRule(_localctx, 32, RULE_fieldRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; typeRef();
			State = 187; Match(JUNCTION);
			State = 188; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertyGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyGet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyGet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetContext propertyGet() {
		PropertyGetContext _localctx = new PropertyGetContext(Context, State);
		EnterRule(_localctx, 34, RULE_propertyGet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(PROPERTY_GET);
			State = 191; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertySet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertySet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetContext propertySet() {
		PropertySetContext _localctx = new PropertySetContext(Context, State);
		EnterRule(_localctx, 36, RULE_propertySet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(PROPERTY_SET);
			State = 194; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefContext : ParserRuleContext {
		public ITerminalNode KEY_PROPERTY() { return GetToken(Assemblier.KEY_PROPERTY, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyGetContext propertyGet() {
			return GetRuleContext<PropertyGetContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(Assemblier.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(Assemblier.COLON, i);
		}
		public PropertySetContext propertySet() {
			return GetRuleContext<PropertySetContext>(0);
		}
		public PropertyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefContext propertyDef() {
		PropertyDefContext _localctx = new PropertyDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_propertyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(KEY_PROPERTY);
			State = 197; Match(BODY_BEGIN);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET) {
				{
				State = 198; propertyGet();
				State = 199; Match(COLON);
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_SET) {
				{
				State = 203; propertySet();
				State = 204; Match(COLON);
				}
			}

			State = 208; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefListContext : ParserRuleContext {
		public TypeRefContext[] typeRef() {
			return GetRuleContexts<TypeRefContext>();
		}
		public TypeRefContext typeRef(int i) {
			return GetRuleContext<TypeRefContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public TypeRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefListContext typeRefList() {
		TypeRefListContext _localctx = new TypeRefListContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210; typeRef();
					State = 211; Match(COMMA);
					}
					} 
				}
				State = 217;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 218; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementListContext : ParserRuleContext {
		public ITerminalNode KEY_IMPLEMENT() { return GetToken(Assemblier.KEY_IMPLEMENT, 0); }
		public TypeRefListContext typeRefList() {
			return GetRuleContext<TypeRefListContext>(0);
		}
		public ImplementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterImplementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitImplementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementListContext implementList() {
		ImplementListContext _localctx = new ImplementListContext(Context, State);
		EnterRule(_localctx, 42, RULE_implementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(KEY_IMPLEMENT);
			State = 221; typeRefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode PRIMITIVE_TYPE() { return GetToken(Assemblier.PRIMITIVE_TYPE, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public TypeArrayContext typeArray() {
			return GetRuleContext<TypeArrayContext>(0);
		}
		public TypeInteriorRefContext typeInteriorRef() {
			return GetRuleContext<TypeInteriorRefContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 223; Match(PRIMITIVE_TYPE);
				}
				break;
			case 2:
				{
				State = 224; typeRef();
				}
				break;
			case 3:
				{
				State = 225; typeArray();
				}
				break;
			case 4:
				{
				State = 226; typeInteriorRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArrayContext : ParserRuleContext {
		public TypeNestArrayContext typeNestArray() {
			return GetRuleContext<TypeNestArrayContext>(0);
		}
		public TypeMultidimensionArrayContext typeMultidimensionArray() {
			return GetRuleContext<TypeMultidimensionArrayContext>(0);
		}
		public TypeArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArrayContext typeArray() {
		TypeArrayContext _localctx = new TypeArrayContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeArray);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; typeNestArray();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; typeMultidimensionArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNestArrayContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public TypeNestArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNestArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeNestArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeNestArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNestArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNestArrayContext typeNestArray() {
		TypeNestArrayContext _localctx = new TypeNestArrayContext(Context, State);
		EnterRule(_localctx, 48, RULE_typeNestArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(ARRAY);
			State = 234; Match(LBRACE);
			State = 235; type();
			State = 236; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMultidimensionArrayContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public TypeMultidimensionArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMultidimensionArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeMultidimensionArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeMultidimensionArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMultidimensionArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMultidimensionArrayContext typeMultidimensionArray() {
		TypeMultidimensionArrayContext _localctx = new TypeMultidimensionArrayContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeMultidimensionArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(ARRAY);
			State = 239; Match(LBRACE);
			State = 240; type();
			State = 241; Match(COMMA);
			State = 242; Match(INT);
			State = 243; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInteriorRefContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(Assemblier.REF, 0); }
		public ITerminalNode PRIMITIVE_TYPE() { return GetToken(Assemblier.PRIMITIVE_TYPE, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public TypeArrayContext typeArray() {
			return GetRuleContext<TypeArrayContext>(0);
		}
		public TypeInteriorRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInteriorRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeInteriorRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeInteriorRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInteriorRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInteriorRefContext typeInteriorRef() {
		TypeInteriorRefContext _localctx = new TypeInteriorRefContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeInteriorRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMITIVE_TYPE:
				{
				State = 245; Match(PRIMITIVE_TYPE);
				}
				break;
			case LMID:
			case IDENTIFIER:
				{
				State = 246; typeRef();
				}
				break;
			case ARRAY:
				{
				State = 247; typeArray();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 250; Match(REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LMID) {
				{
				State = 252; Match(LMID);
				State = 253; Match(IDENTIFIER);
				State = 254; Match(RMID);
				}
			}

			State = 257; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Assemblier.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Assemblier.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Assemblier.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Assemblier.DOT, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 259; Match(IDENTIFIER);
					State = 260; Match(DOT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 265; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public MethodDefContext[] methodDef() {
			return GetRuleContexts<MethodDefContext>();
		}
		public MethodDefContext methodDef(int i) {
			return GetRuleContext<MethodDefContext>(i);
		}
		public PropertyDefContext[] propertyDef() {
			return GetRuleContexts<PropertyDefContext>();
		}
		public PropertyDefContext propertyDef(int i) {
			return GetRuleContext<PropertyDefContext>(i);
		}
		public FieldDefContext[] fieldDef() {
			return GetRuleContexts<FieldDefContext>();
		}
		public FieldDefContext fieldDef(int i) {
			return GetRuleContext<FieldDefContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(Assemblier.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(Assemblier.COLON, i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_CLASS) | (1L << KEY_METHOD) | (1L << KEY_PROPERTY) | (1L << MODIFIER_ACCESS))) != 0)) {
				{
				State = 273;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KEY_METHOD:
					{
					State = 267; methodDef();
					}
					break;
				case KEY_PROPERTY:
					{
					State = 268; propertyDef();
					}
					break;
				case MODIFIER_ACCESS:
					{
					State = 269; fieldDef();
					State = 270; Match(COLON);
					}
					break;
				case KEY_CLASS:
					{
					State = 272; classDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode KEY_CLASS() { return GetToken(Assemblier.KEY_CLASS, 0); }
		public ITerminalNode MODIFIER_ACCESS() { return GetToken(Assemblier.MODIFIER_ACCESS, 0); }
		public ITerminalNode MODIFIER_LIFE() { return GetToken(Assemblier.MODIFIER_LIFE, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public ITerminalNode MODIFIER_NEST() { return GetToken(Assemblier.MODIFIER_NEST, 0); }
		public ITerminalNode KEY_INHERIT() { return GetToken(Assemblier.KEY_INHERIT, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ImplementListContext implementList() {
			return GetRuleContext<ImplementListContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(KEY_CLASS);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_NEST) {
				{
				State = 279; Match(MODIFIER_NEST);
				}
			}

			State = 282; Match(MODIFIER_ACCESS);
			State = 283; Match(MODIFIER_LIFE);
			State = 284; typeName();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_INHERIT) {
				{
				State = 285; Match(KEY_INHERIT);
				State = 286; typeRef();
				}
			}

			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_IMPLEMENT) {
				{
				State = 289; implementList();
				}
			}

			State = 292; Match(BODY_BEGIN);
			State = 293; classBody();
			State = 294; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode GUID() { return GetToken(Assemblier.GUID, 0); }
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_propertyValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << HEX) | (1L << NUMBER) | (1L << GUID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyKeyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public PropertyKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyKeyContext propertyKey() {
		PropertyKeyContext _localctx = new PropertyKeyContext(Context, State);
		EnterRule(_localctx, 64, RULE_propertyKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public PropertyKeyContext propertyKey() {
			return GetRuleContext<PropertyKeyContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(Assemblier.EQ, 0); }
		public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 66, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; propertyKey();
			State = 301; Match(EQ);
			State = 302; propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyDefContext : ParserRuleContext {
		public ITerminalNode KEY_ASSEMBLY() { return GetToken(Assemblier.KEY_ASSEMBLY, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public AssemblyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterAssemblyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitAssemblyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyDefContext assemblyDef() {
		AssemblyDefContext _localctx = new AssemblyDefContext(Context, State);
		EnterRule(_localctx, 68, RULE_assemblyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(KEY_ASSEMBLY);
			State = 305; Match(BODY_BEGIN);
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 306; property();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 311; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x13C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', 'K', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'N', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'X', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\\', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'i', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x6', '\n', 'v', '\n', '\n', '\r', '\n', '\xE', '\n', 'w', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', 
		'\v', '\x7F', '\n', '\v', '\r', '\v', '\xE', '\v', '\x80', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x88', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x8B', '\v', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x94', '\n', '\r', '\x3', '\xE', '\x5', '\xE', '\x97', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x9F', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xB1', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xB4', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xCC', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xD1', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xD8', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\xDB', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xE6', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\xEA', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xFB', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x102', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x6', '\x1E', '\x108', '\n', '\x1E', '\r', 
		'\x1E', '\xE', '\x1E', '\x109', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x114', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x117', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x11B', '\n', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x122', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x125', '\n', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x6', '$', '\x136', '\n', '$', '\r', '$', 
		'\xE', '$', '\x137', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x2', 
		'%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', '\x2', '\x4', '\x4', '\x2', '!', '!', '\x37', 
		'\x37', '\x4', '\x2', '\x32', '\x34', '\x36', '\x36', '\x2', '\x13B', 
		'\x2', 'H', '\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', '[', '\x3', '\x2', 
		'\x2', '\x2', '\n', ']', '\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'h', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'p', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x16', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x93', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', ' ', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xBC', '\x3', '\x2', '\x2', '\x2', '$', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xC3', '\x3', '\x2', '\x2', '\x2', '(', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xD9', '\x3', '\x2', '\x2', '\x2', ',', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\x32', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x36', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x101', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '<', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x118', '\x3', '\x2', '\x2', '\x2', '@', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x46', '\x132', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'L', '\x5', '\x46', '$', '\x2', 'I', 'K', '\x5', '>', ' ', 
		'\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', '\x3', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x5', '.', '\x18', '\x2', 'P', 'Q', '\a', '\x37', 
		'\x2', '\x2', 'Q', '\x5', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', 
		'\x4', '\x3', '\x2', 'S', 'T', '\a', '\xF', '\x2', '\x2', 'T', 'U', '\x5', 
		'\x6', '\x4', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'R', '\x3', '\x2', '\x2', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\a', '#', '\x2', '\x2', 'Z', '\\', '\x5', '.', '\x18', '\x2', '[', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', 
		'\t', '\x3', '\x2', '\x2', '\x2', ']', '^', '\t', '\x2', '\x2', '\x2', 
		'^', '\v', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', ',', '\x2', '\x2', 
		'`', '\x61', '\a', '\a', '\x2', '\x2', '\x61', '\x62', '\a', '\x32', '\x2', 
		'\x2', '\x62', '\x63', '\a', '\xF', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\x32', '\x2', '\x2', '\x64', '\x65', '\a', '\b', '\x2', '\x2', '\x65', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\a', '+', '\x2', '\x2', 
		'g', 'i', '\x5', '\f', '\a', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '\a', '\x2', '\x2', 'k', 'l', '\a', '\x35', 
		'\x2', '\x2', 'l', 'm', '\a', '\b', '\x2', '\x2', 'm', 'n', '\x5', '.', 
		'\x18', '\x2', 'n', 'o', '\a', '\x37', '\x2', '\x2', 'o', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\a', '-', '\x2', '\x2', 'q', 'u', '\a', 
		'\t', '\x2', '\x2', 'r', 's', '\x5', '\x10', '\t', '\x2', 's', 't', '\a', 
		'\x4', '\x2', '\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\n', '\x2', '\x2', 'z', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '.', '\x2', '\x2', '|', '~', 
		'\a', '\t', '\x2', '\x2', '}', '\x7F', '\x5', '\x16', '\f', '\x2', '~', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\n', '\x2', '\x2', '\x83', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\xE', '\x2', '\x2', '\x85', '\x89', '\a', 
		'\x37', '\x2', '\x2', '\x86', '\x88', '\x5', '\x18', '\r', '\x2', '\x87', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x94', '\a', '\x33', '\x2', 
		'\x2', '\x8D', '\x94', '\a', '\x34', '\x2', '\x2', '\x8E', '\x94', '\a', 
		'\x32', '\x2', '\x2', '\x8F', '\x94', '\x5', '\x1E', '\x10', '\x2', '\x90', 
		'\x94', '\x5', '\"', '\x12', '\x2', '\x91', '\x94', '\x5', '.', '\x18', 
		'\x2', '\x92', '\x94', '\x5', ':', '\x1E', '\x2', '\x93', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x93', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '\x12', '\n', 
		'\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\x5', '\x14', '\v', '\x2', '\x99', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\a', '\x14', '\x2', '\x2', '\x9B', '\x9C', '\a', 
		'\x18', '\x2', '\x2', '\x9C', '\x9E', '\a', '\x19', '\x2', '\x2', '\x9D', 
		'\x9F', '\a', '\x31', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\b', '\x5', '\x2', '\xA1', 
		'\xA2', '\x5', '\n', '\x6', '\x2', '\xA2', '\xA3', '\a', '\v', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '\x6', '\x4', '\x2', '\xA4', '\xA5', '\a', 
		'\f', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\xE', '\b', '\x2', '\xA6', 
		'\xA7', '\a', '\t', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x1A', '\xE', 
		'\x2', '\xA8', '\xA9', '\a', '\n', '\x2', '\x2', '\xA9', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\b', '\x5', '\x2', '\xAB', 
		'\xAC', '\x5', '\x38', '\x1D', '\x2', '\xAC', '\xAD', '\a', '\x11', '\x2', 
		'\x2', '\xAD', '\xAE', '\x5', '\n', '\x6', '\x2', '\xAE', '\xB2', '\a', 
		'\v', '\x2', '\x2', '\xAF', '\xB1', '\x5', '.', '\x18', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\f', '\x2', 
		'\x2', '\xB6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\x18', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x19', '\x2', '\x2', '\xB9', 
		'\xBA', '\x5', '.', '\x18', '\x2', '\xBA', '\xBB', '\a', '\x37', '\x2', 
		'\x2', '\xBB', '!', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		'\x38', '\x1D', '\x2', '\xBD', '\xBE', '\a', '\x11', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '\x37', '\x2', '\x2', '\xBF', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '/', '\x2', '\x2', '\xC1', '\xC2', '\x5', 
		'\x1E', '\x10', '\x2', '\xC2', '%', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x30', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x1E', '\x10', 
		'\x2', '\xC5', '\'', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\x15', '\x2', '\x2', '\xC7', '\xCB', '\a', '\t', '\x2', '\x2', '\xC8', 
		'\xC9', '\x5', '$', '\x13', '\x2', '\xC9', '\xCA', '\a', '\x4', '\x2', 
		'\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '&', '\x14', 
		'\x2', '\xCE', '\xCF', '\a', '\x4', '\x2', '\x2', '\xCF', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\n', '\x2', '\x2', '\xD3', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x5', '\x38', '\x1D', '\x2', '\xD5', '\xD6', 
		'\a', '\xF', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x38', 
		'\x1D', '\x2', '\xDD', '+', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\a', '\x17', '\x2', '\x2', '\xDF', '\xE0', '\x5', '*', '\x16', '\x2', 
		'\xE0', '-', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE6', '\a', '$', '\x2', 
		'\x2', '\xE2', '\xE6', '\x5', '\x38', '\x1D', '\x2', '\xE3', '\xE6', '\x5', 
		'\x30', '\x19', '\x2', '\xE4', '\xE6', '\x5', '\x36', '\x1C', '\x2', '\xE5', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '/', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xEA', '\x5', '\x32', '\x1A', '\x2', '\xE8', '\xEA', '\x5', '\x34', '\x1B', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\x31', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', '\"', '\x2', '\x2', '\xEC', '\xED', '\a', '\x5', '\x2', 
		'\x2', '\xED', '\xEE', '\x5', '.', '\x18', '\x2', '\xEE', '\xEF', '\a', 
		'\x6', '\x2', '\x2', '\xEF', '\x33', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\"', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x5', '\x2', 
		'\x2', '\xF2', '\xF3', '\x5', '.', '\x18', '\x2', '\xF3', '\xF4', '\a', 
		'\xF', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x35', '\x2', '\x2', '\xF5', 
		'\xF6', '\a', '\x6', '\x2', '\x2', '\xF6', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xFB', '\a', '$', '\x2', '\x2', '\xF8', '\xFB', '\x5', 
		'\x38', '\x1D', '\x2', '\xF9', '\xFB', '\x5', '\x30', '\x19', '\x2', '\xFA', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x10', '\x2', '\x2', '\xFD', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\a', '\x2', 
		'\x2', '\xFF', '\x100', '\a', '\x37', '\x2', '\x2', '\x100', '\x102', 
		'\a', '\b', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x5', ':', '\x1E', '\x2', '\x104', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x37', '\x2', 
		'\x2', '\x106', '\x108', '\a', '\xE', '\x2', '\x2', '\x107', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\a', '\x37', '\x2', '\x2', '\x10C', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x114', '\x5', '\x1C', '\xF', '\x2', '\x10E', '\x114', 
		'\x5', '(', '\x15', '\x2', '\x10F', '\x110', '\x5', ' ', '\x11', '\x2', 
		'\x110', '\x111', '\a', '\x4', '\x2', '\x2', '\x111', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x114', '\x5', '>', ' ', '\x2', '\x113', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x113', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '=', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '\x13', '\x2', 
		'\x2', '\x119', '\x11B', '\a', '\x1C', '\x2', '\x2', '\x11A', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', 
		'\x18', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x19', '\x2', '\x2', '\x11E', 
		'\x121', '\x5', ':', '\x1E', '\x2', '\x11F', '\x120', '\a', '\x16', '\x2', 
		'\x2', '\x120', '\x122', '\x5', '\x38', '\x1D', '\x2', '\x121', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x124', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\x5', 
		',', '\x17', '\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\a', '\t', '\x2', '\x2', '\x127', '\x128', '\x5', 
		'<', '\x1F', '\x2', '\x128', '\x129', '\a', '\n', '\x2', '\x2', '\x129', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\t', '\x3', '\x2', 
		'\x2', '\x12B', '\x41', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\a', '\x37', '\x2', '\x2', '\x12D', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x5', '\x42', '\"', '\x2', '\x12F', '\x130', '\a', 
		'\r', '\x2', '\x2', '\x130', '\x131', '\x5', '@', '!', '\x2', '\x131', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\a', '\x12', '\x2', 
		'\x2', '\x133', '\x135', '\a', '\t', '\x2', '\x2', '\x134', '\x136', '\x5', 
		'\x44', '#', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '\n', '\x2', '\x2', 
		'\x13A', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B', 'L', 'W', '[', 'h', 
		'w', '\x80', '\x89', '\x93', '\x96', '\x9E', '\xB2', '\xCB', '\xD0', '\xD9', 
		'\xE5', '\xE9', '\xFA', '\x101', '\x109', '\x113', '\x115', '\x11A', '\x121', 
		'\x124', '\x137',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
