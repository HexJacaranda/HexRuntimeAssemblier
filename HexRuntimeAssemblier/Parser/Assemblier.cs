//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Hex\source\repos\HexJacaranda\HexRuntimeAssemblier\HexRuntimeAssemblier\.antlr\Assemblier.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Assemblier : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LBRACE=2, RBRACE=3, LMID=4, RMID=5, BODY_BEGIN=6, BODY_END=7, PARAM_BEGIN=8, 
		PARAM_END=9, EQ=10, DOT=11, COMMA=12, REF=13, JUNCTION=14, COLON=15, EXCLAMATION=16, 
		KEY_NAMESPACE=17, KEY_ASSEMBLY=18, KEY_INTERFACE=19, KEY_CLASS=20, KEY_STRUCT=21, 
		KEY_METHOD=22, KEY_PROPERTY=23, KEY_EVENT=24, KEY_FIELD=25, KEY_INHERIT=26, 
		KEY_IMPLEMENT=27, KEY_GENERIC=28, MODIFIER_ABSTRACT=29, MODIFIER_VIRTUAL=30, 
		MODIFIER_SEALED=31, MODIFIER_STATIC=32, MODIFIER_INSTANCE=33, MODIFIER_VOLATILE=34, 
		MODIFIER_THREAD_LOCAL=35, MODIFIER_CONSTANT=36, MODIFIER_READONLY=37, 
		MODIFIER_ATTRIBUTE=38, MODIFIER_NEST=39, MODIFIER_PUBLIC=40, MODIFIER_PRIVATE=41, 
		MODIFIER_INTERNAL=42, MODIFIER_PROTECTED=43, KEY_TRUE=44, KEY_FALSE=45, 
		CTOR=46, ARRAY=47, VOID=48, PRIMITIVE_INT=49, PRIMITIVE_UINT=50, PRIMITIVE_LONG=51, 
		PRIMITIVE_ULONG=52, PRIMITIVE_SHORT=53, PRIMITIVE_USHORT=54, PRIMITIVE_BYTE=55, 
		PRIMITIVE_UBYTE=56, PRIMITIVE_CHAR=57, PRIMITIVE_R4=58, PRIMITIVE_R8=59, 
		PRIMITIVE_STRING=60, PRIMITIVE_OBJECT=61, PRIMITIVE_BOOL=62, METHOD_MANAGED=63, 
		METHOD_IMPORT=64, METHOD_LOCAL=65, METHOD_CODE=66, PROPERTY_GET=67, PROPERTY_SET=68, 
		EVENT_ADD=69, EVENT_REMOVE=70, IL_CMP_EQ=71, IL_CMP_NE=72, IL_CMP_GT=73, 
		IL_CMP_LT=74, IL_CMP_GE=75, IL_CMP_LE=76, IL_PRESUDO_LABEL=77, IL_LDFLD=78, 
		IL_LDFLDA=79, IL_LDLOC=80, IL_LDLOCA=81, IL_LDARG=82, IL_LDARGA=83, IL_LDELEM=84, 
		IL_LDELEMA=85, IL_LDSTR=86, IL_LDC=87, IL_LDFN=88, IL_LDNULL=89, IL_LDIND=90, 
		IL_STFLD=91, IL_STLOC=92, IL_STARG=93, IL_STELEM=94, IL_STTA=95, IL_ADD=96, 
		IL_SUB=97, IL_MUL=98, IL_DIV=99, IL_MOD=100, IL_AND=101, IL_OR=102, IL_XOR=103, 
		IL_NOT=104, IL_NEG=105, IL_CONV=106, IL_CALL=107, IL_CALLVIRT=108, IL_RET=109, 
		IL_CMP=110, IL_JCC=111, IL_JMP=112, IL_THROW=113, IL_TRY=114, IL_CATCH=115, 
		IL_FINALLY=116, IL_ARC=117, IL_NEW=118, IL_NEWARRAY=119, IL_CAST=120, 
		IL_BOX=121, IL_UNBOX=122, IL_DUP=123, IL_POP=124, IL_NOP=125, STRING=126, 
		HEX=127, INT=128, NUMBER=129, GUID=130, IDENTIFIER=131;
	public const int
		RULE_start = 0, RULE_modifierAccess = 1, RULE_modifierLife = 2, RULE_methodArgument = 3, 
		RULE_methodArgumentList = 4, RULE_methodReturnType = 5, RULE_methodName = 6, 
		RULE_methodImport = 7, RULE_methodSource = 8, RULE_methodLocal = 9, RULE_methodLocals = 10, 
		RULE_methodCode = 11, RULE_methodProperty = 12, RULE_methodBody = 13, 
		RULE_methodDef = 14, RULE_methodParentType = 15, RULE_methodRef = 16, 
		RULE_fieldDef = 17, RULE_fieldRef = 18, RULE_propertyGet = 19, RULE_propertySet = 20, 
		RULE_propertyDef = 21, RULE_eventAdd = 22, RULE_eventRemove = 23, RULE_eventDef = 24, 
		RULE_inheritOrImplementType = 25, RULE_typeRefList = 26, RULE_implementList = 27, 
		RULE_typeInherit = 28, RULE_assemblyRef = 29, RULE_typeRef = 30, RULE_typeName = 31, 
		RULE_typeRefNamespace = 32, RULE_typeRefGeneric = 33, RULE_typeRefPlain = 34, 
		RULE_typeRefNode = 35, RULE_primitiveType = 36, RULE_genericParameterList = 37, 
		RULE_type = 38, RULE_genericParameterRef = 39, RULE_arrayType = 40, RULE_nestArrayType = 41, 
		RULE_multidimensionArrayType = 42, RULE_interiorRefType = 43, RULE_genericList = 44, 
		RULE_classBody = 45, RULE_className = 46, RULE_namespaceValue = 47, RULE_classNameSpace = 48, 
		RULE_classDef = 49, RULE_propertyValue = 50, RULE_propertyKey = 51, RULE_property = 52, 
		RULE_assemblyDef = 53, RULE_opLabel = 54, RULE_opLdFld = 55, RULE_opLdFldA = 56, 
		RULE_opLdLoc = 57, RULE_opLdLocA = 58, RULE_opLdArg = 59, RULE_opLdArgA = 60, 
		RULE_opLdElem = 61, RULE_opLdElemA = 62, RULE_opLdInd = 63, RULE_opLdStr = 64, 
		RULE_opConstant = 65, RULE_opLdC = 66, RULE_opLdFn = 67, RULE_opLdNull = 68, 
		RULE_opStFld = 69, RULE_opStLoc = 70, RULE_opStArg = 71, RULE_opStElem = 72, 
		RULE_opStTA = 73, RULE_opAdd = 74, RULE_opSub = 75, RULE_opMul = 76, RULE_opDiv = 77, 
		RULE_opMod = 78, RULE_opAnd = 79, RULE_opOr = 80, RULE_opXor = 81, RULE_opNot = 82, 
		RULE_opNeg = 83, RULE_opConv = 84, RULE_opCall = 85, RULE_opCallVirt = 86, 
		RULE_opRet = 87, RULE_opCmpCond = 88, RULE_opCmp = 89, RULE_opJcc = 90, 
		RULE_opJmp = 91, RULE_opThrow = 92, RULE_opTry = 93, RULE_opCatch = 94, 
		RULE_opFinally = 95, RULE_opNew = 96, RULE_opNewArr = 97, RULE_opCast = 98, 
		RULE_opBox = 99, RULE_opUnBox = 100, RULE_opDup = 101, RULE_opPop = 102, 
		RULE_opNop = 103, RULE_ilInstruction = 104;
	public static readonly string[] ruleNames = {
		"start", "modifierAccess", "modifierLife", "methodArgument", "methodArgumentList", 
		"methodReturnType", "methodName", "methodImport", "methodSource", "methodLocal", 
		"methodLocals", "methodCode", "methodProperty", "methodBody", "methodDef", 
		"methodParentType", "methodRef", "fieldDef", "fieldRef", "propertyGet", 
		"propertySet", "propertyDef", "eventAdd", "eventRemove", "eventDef", "inheritOrImplementType", 
		"typeRefList", "implementList", "typeInherit", "assemblyRef", "typeRef", 
		"typeName", "typeRefNamespace", "typeRefGeneric", "typeRefPlain", "typeRefNode", 
		"primitiveType", "genericParameterList", "type", "genericParameterRef", 
		"arrayType", "nestArrayType", "multidimensionArrayType", "interiorRefType", 
		"genericList", "classBody", "className", "namespaceValue", "classNameSpace", 
		"classDef", "propertyValue", "propertyKey", "property", "assemblyDef", 
		"opLabel", "opLdFld", "opLdFldA", "opLdLoc", "opLdLocA", "opLdArg", "opLdArgA", 
		"opLdElem", "opLdElemA", "opLdInd", "opLdStr", "opConstant", "opLdC", 
		"opLdFn", "opLdNull", "opStFld", "opStLoc", "opStArg", "opStElem", "opStTA", 
		"opAdd", "opSub", "opMul", "opDiv", "opMod", "opAnd", "opOr", "opXor", 
		"opNot", "opNeg", "opConv", "opCall", "opCallVirt", "opRet", "opCmpCond", 
		"opCmp", "opJcc", "opJmp", "opThrow", "opTry", "opCatch", "opFinally", 
		"opNew", "opNewArr", "opCast", "opBox", "opUnBox", "opDup", "opPop", "opNop", 
		"ilInstruction"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'='", 
		"'.'", "','", "'&'", "'::'", "':'", "'!'", "'.namespace'", "'.assembly'", 
		"'.interface'", "'.class'", "'.struct'", "'.method'", "'.property'", "'.event'", 
		"'.field'", "'.inherits'", "'.implements'", "'.generic'", "'abstract'", 
		"'virtual'", "'sealed'", "'static'", "'instance'", "'volatile'", "'threadlocal'", 
		"'const'", "'readonly'", "'attribute'", "'nested'", "'public'", "'private'", 
		"'internal'", "'protected'", "'true'", "'false'", null, "'array'", "'void'", 
		"'int32'", "'uint32'", "'int64'", "'uint64'", "'int16'", "'uint16'", "'int8'", 
		"'uint8'", "'char'", "'float'", "'double'", "'string'", "'object'", "'bool'", 
		"'managed'", "'import'", "'.local'", "'.code'", "'.get'", "'.set'", "'.adder'", 
		"'.remover'", "'.eq'", "'.ne'", "'.gt'", "'.lt'", "'.ge'", "'.le'", "'.label'", 
		"'.ldfld'", "'.ldflda'", "'.ldloc'", "'.ldloca'", "'.ldarg'", "'.ldarga'", 
		"'.ldelem'", "'.ldelema'", "'.ldstr'", "'.ldc'", "'.ldfn'", "'.ldnull'", 
		"'.ldind'", "'.stfld'", "'.stloc'", "'.starg'", "'.stelem'", "'.stta'", 
		"'.add'", "'.sub'", "'.mul'", "'.div'", "'.mod'", "'.and'", "'.or'", "'.xor'", 
		"'.not'", "'.neg'", "'.conv'", "'.call'", "'.callvirt'", "'.ret'", "'.cmp'", 
		"'.jcc'", "'.jmp'", "'.throw'", "'.try'", "'.catch'", "'.finally'", "'.arc'", 
		"'.new'", "'.newarr'", "'.cast'", "'.box'", "'.unbox'", "'.dup'", "'.pop'", 
		"'.nop'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LBRACE", "RBRACE", "LMID", "RMID", "BODY_BEGIN", "BODY_END", 
		"PARAM_BEGIN", "PARAM_END", "EQ", "DOT", "COMMA", "REF", "JUNCTION", "COLON", 
		"EXCLAMATION", "KEY_NAMESPACE", "KEY_ASSEMBLY", "KEY_INTERFACE", "KEY_CLASS", 
		"KEY_STRUCT", "KEY_METHOD", "KEY_PROPERTY", "KEY_EVENT", "KEY_FIELD", 
		"KEY_INHERIT", "KEY_IMPLEMENT", "KEY_GENERIC", "MODIFIER_ABSTRACT", "MODIFIER_VIRTUAL", 
		"MODIFIER_SEALED", "MODIFIER_STATIC", "MODIFIER_INSTANCE", "MODIFIER_VOLATILE", 
		"MODIFIER_THREAD_LOCAL", "MODIFIER_CONSTANT", "MODIFIER_READONLY", "MODIFIER_ATTRIBUTE", 
		"MODIFIER_NEST", "MODIFIER_PUBLIC", "MODIFIER_PRIVATE", "MODIFIER_INTERNAL", 
		"MODIFIER_PROTECTED", "KEY_TRUE", "KEY_FALSE", "CTOR", "ARRAY", "VOID", 
		"PRIMITIVE_INT", "PRIMITIVE_UINT", "PRIMITIVE_LONG", "PRIMITIVE_ULONG", 
		"PRIMITIVE_SHORT", "PRIMITIVE_USHORT", "PRIMITIVE_BYTE", "PRIMITIVE_UBYTE", 
		"PRIMITIVE_CHAR", "PRIMITIVE_R4", "PRIMITIVE_R8", "PRIMITIVE_STRING", 
		"PRIMITIVE_OBJECT", "PRIMITIVE_BOOL", "METHOD_MANAGED", "METHOD_IMPORT", 
		"METHOD_LOCAL", "METHOD_CODE", "PROPERTY_GET", "PROPERTY_SET", "EVENT_ADD", 
		"EVENT_REMOVE", "IL_CMP_EQ", "IL_CMP_NE", "IL_CMP_GT", "IL_CMP_LT", "IL_CMP_GE", 
		"IL_CMP_LE", "IL_PRESUDO_LABEL", "IL_LDFLD", "IL_LDFLDA", "IL_LDLOC", 
		"IL_LDLOCA", "IL_LDARG", "IL_LDARGA", "IL_LDELEM", "IL_LDELEMA", "IL_LDSTR", 
		"IL_LDC", "IL_LDFN", "IL_LDNULL", "IL_LDIND", "IL_STFLD", "IL_STLOC", 
		"IL_STARG", "IL_STELEM", "IL_STTA", "IL_ADD", "IL_SUB", "IL_MUL", "IL_DIV", 
		"IL_MOD", "IL_AND", "IL_OR", "IL_XOR", "IL_NOT", "IL_NEG", "IL_CONV", 
		"IL_CALL", "IL_CALLVIRT", "IL_RET", "IL_CMP", "IL_JCC", "IL_JMP", "IL_THROW", 
		"IL_TRY", "IL_CATCH", "IL_FINALLY", "IL_ARC", "IL_NEW", "IL_NEWARRAY", 
		"IL_CAST", "IL_BOX", "IL_UNBOX", "IL_DUP", "IL_POP", "IL_NOP", "STRING", 
		"HEX", "INT", "NUMBER", "GUID", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assemblier.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Assemblier() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Assemblier(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Assemblier(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public AssemblyDefContext assemblyDef() {
			return GetRuleContext<AssemblyDefContext>(0);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; assemblyDef();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT))) != 0)) {
				{
				{
				State = 211; classDef();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierAccessContext : ParserRuleContext {
		public ITerminalNode MODIFIER_PUBLIC() { return GetToken(Assemblier.MODIFIER_PUBLIC, 0); }
		public ITerminalNode MODIFIER_PRIVATE() { return GetToken(Assemblier.MODIFIER_PRIVATE, 0); }
		public ITerminalNode MODIFIER_PROTECTED() { return GetToken(Assemblier.MODIFIER_PROTECTED, 0); }
		public ITerminalNode MODIFIER_INTERNAL() { return GetToken(Assemblier.MODIFIER_INTERNAL, 0); }
		public ModifierAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterModifierAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitModifierAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierAccessContext modifierAccess() {
		ModifierAccessContext _localctx = new ModifierAccessContext(Context, State);
		EnterRule(_localctx, 2, RULE_modifierAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_PUBLIC) | (1L << MODIFIER_PRIVATE) | (1L << MODIFIER_INTERNAL) | (1L << MODIFIER_PROTECTED))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierLifeContext : ParserRuleContext {
		public ITerminalNode MODIFIER_INSTANCE() { return GetToken(Assemblier.MODIFIER_INSTANCE, 0); }
		public ITerminalNode MODIFIER_STATIC() { return GetToken(Assemblier.MODIFIER_STATIC, 0); }
		public ModifierLifeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierLife; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterModifierLife(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitModifierLife(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierLife(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierLifeContext modifierLife() {
		ModifierLifeContext _localctx = new ModifierLifeContext(Context, State);
		EnterRule(_localctx, 4, RULE_modifierLife);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !(_la==MODIFIER_STATIC || _la==MODIFIER_INSTANCE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; type();
			State = 222; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentListContext : ParserRuleContext {
		public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public MethodArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentListContext methodArgumentList() {
		MethodArgumentListContext _localctx = new MethodArgumentListContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << EXCLAMATION) | (1L << ARRAY) | (1L << PRIMITIVE_INT) | (1L << PRIMITIVE_UINT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_ULONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_USHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_UBYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_R4) | (1L << PRIMITIVE_R8) | (1L << PRIMITIVE_STRING) | (1L << PRIMITIVE_OBJECT) | (1L << PRIMITIVE_BOOL))) != 0)) {
				{
				State = 224; methodArgument();
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 225; Match(COMMA);
					State = 226; methodArgument();
					}
					}
					State = 231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReturnTypeContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(Assemblier.VOID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReturnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReturnTypeContext methodReturnType() {
		MethodReturnTypeContext _localctx = new MethodReturnTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodReturnType);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(VOID);
				}
				break;
			case LMID:
			case EXCLAMATION:
			case ARRAY:
			case PRIMITIVE_INT:
			case PRIMITIVE_UINT:
			case PRIMITIVE_LONG:
			case PRIMITIVE_ULONG:
			case PRIMITIVE_SHORT:
			case PRIMITIVE_USHORT:
			case PRIMITIVE_BYTE:
			case PRIMITIVE_UBYTE:
			case PRIMITIVE_CHAR:
			case PRIMITIVE_R4:
			case PRIMITIVE_R8:
			case PRIMITIVE_STRING:
			case PRIMITIVE_OBJECT:
			case PRIMITIVE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode CTOR() { return GetToken(Assemblier.CTOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = TokenStream.LA(1);
			if ( !(_la==CTOR || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodImportContext : ParserRuleContext {
		public ITerminalNode METHOD_IMPORT() { return GetToken(Assemblier.METHOD_IMPORT, 0); }
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode[] STRING() { return GetTokens(Assemblier.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(Assemblier.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public MethodImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodImportContext methodImport() {
		MethodImportContext _localctx = new MethodImportContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(METHOD_IMPORT);
			State = 241; Match(LMID);
			State = 242; Match(STRING);
			State = 243; Match(COMMA);
			State = 244; Match(STRING);
			State = 245; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSourceContext : ParserRuleContext {
		public ITerminalNode METHOD_MANAGED() { return GetToken(Assemblier.METHOD_MANAGED, 0); }
		public MethodImportContext methodImport() {
			return GetRuleContext<MethodImportContext>(0);
		}
		public MethodSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSourceContext methodSource() {
		MethodSourceContext _localctx = new MethodSourceContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodSource);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case METHOD_MANAGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; Match(METHOD_MANAGED);
				}
				break;
			case METHOD_IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; methodImport();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalContext methodLocal() {
		MethodLocalContext _localctx = new MethodLocalContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; type();
			State = 252; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalsContext : ParserRuleContext {
		public ITerminalNode METHOD_LOCAL() { return GetToken(Assemblier.METHOD_LOCAL, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodLocalContext[] methodLocal() {
			return GetRuleContexts<MethodLocalContext>();
		}
		public MethodLocalContext methodLocal(int i) {
			return GetRuleContext<MethodLocalContext>(i);
		}
		public MethodLocalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalsContext methodLocals() {
		MethodLocalsContext _localctx = new MethodLocalsContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodLocals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(METHOD_LOCAL);
			State = 255; Match(BODY_BEGIN);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 256; methodLocal();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << EXCLAMATION) | (1L << ARRAY) | (1L << PRIMITIVE_INT) | (1L << PRIMITIVE_UINT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_ULONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_USHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_UBYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_R4) | (1L << PRIMITIVE_R8) | (1L << PRIMITIVE_STRING) | (1L << PRIMITIVE_OBJECT) | (1L << PRIMITIVE_BOOL))) != 0) );
			State = 261; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCodeContext : ParserRuleContext {
		public ITerminalNode METHOD_CODE() { return GetToken(Assemblier.METHOD_CODE, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public IlInstructionContext[] ilInstruction() {
			return GetRuleContexts<IlInstructionContext>();
		}
		public IlInstructionContext ilInstruction(int i) {
			return GetRuleContext<IlInstructionContext>(i);
		}
		public MethodCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCodeContext methodCode() {
		MethodCodeContext _localctx = new MethodCodeContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(METHOD_CODE);
			State = 264; Match(BODY_BEGIN);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 265; ilInstruction();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IL_PRESUDO_LABEL - 77)) | (1L << (IL_LDFLD - 77)) | (1L << (IL_LDFLDA - 77)) | (1L << (IL_LDLOC - 77)) | (1L << (IL_LDLOCA - 77)) | (1L << (IL_LDARG - 77)) | (1L << (IL_LDARGA - 77)) | (1L << (IL_LDELEM - 77)) | (1L << (IL_LDELEMA - 77)) | (1L << (IL_LDSTR - 77)) | (1L << (IL_LDC - 77)) | (1L << (IL_LDFN - 77)) | (1L << (IL_LDNULL - 77)) | (1L << (IL_LDIND - 77)) | (1L << (IL_STFLD - 77)) | (1L << (IL_STLOC - 77)) | (1L << (IL_STARG - 77)) | (1L << (IL_STELEM - 77)) | (1L << (IL_STTA - 77)) | (1L << (IL_ADD - 77)) | (1L << (IL_SUB - 77)) | (1L << (IL_MUL - 77)) | (1L << (IL_DIV - 77)) | (1L << (IL_MOD - 77)) | (1L << (IL_AND - 77)) | (1L << (IL_OR - 77)) | (1L << (IL_XOR - 77)) | (1L << (IL_NOT - 77)) | (1L << (IL_NEG - 77)) | (1L << (IL_CONV - 77)) | (1L << (IL_CALL - 77)) | (1L << (IL_CALLVIRT - 77)) | (1L << (IL_RET - 77)) | (1L << (IL_CMP - 77)) | (1L << (IL_JCC - 77)) | (1L << (IL_JMP - 77)) | (1L << (IL_THROW - 77)) | (1L << (IL_TRY - 77)) | (1L << (IL_CATCH - 77)) | (1L << (IL_FINALLY - 77)) | (1L << (IL_ARC - 77)) | (1L << (IL_NEW - 77)) | (1L << (IL_NEWARRAY - 77)) | (1L << (IL_DUP - 77)) | (1L << (IL_POP - 77)) | (1L << (IL_NOP - 77)))) != 0) );
			State = 270; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPropertyContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPropertyContext methodProperty() {
		MethodPropertyContext _localctx = new MethodPropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = TokenStream.LA(1);
			if ( !(_la==PROPERTY_GET || _la==PROPERTY_SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodCodeContext methodCode() {
			return GetRuleContext<MethodCodeContext>(0);
		}
		public MethodLocalsContext methodLocals() {
			return GetRuleContext<MethodLocalsContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==METHOD_LOCAL) {
				{
				State = 274; methodLocals();
				}
			}

			State = 277; methodCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		public ITerminalNode KEY_METHOD() { return GetToken(Assemblier.KEY_METHOD, 0); }
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public MethodReturnTypeContext methodReturnType() {
			return GetRuleContext<MethodReturnTypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public MethodSourceContext methodSource() {
			return GetRuleContext<MethodSourceContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodPropertyContext methodProperty() {
			return GetRuleContext<MethodPropertyContext>(0);
		}
		public ITerminalNode MODIFIER_VIRTUAL() { return GetToken(Assemblier.MODIFIER_VIRTUAL, 0); }
		public GenericListContext genericList() {
			return GetRuleContext<GenericListContext>(0);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(KEY_METHOD);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET || _la==PROPERTY_SET) {
				{
				State = 280; methodProperty();
				}
			}

			State = 283; modifierAccess();
			State = 284; modifierLife();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_VIRTUAL) {
				{
				State = 285; Match(MODIFIER_VIRTUAL);
				}
			}

			State = 288; methodReturnType();
			State = 289; methodName();
			State = 290; Match(PARAM_BEGIN);
			State = 291; methodArgumentList();
			State = 292; Match(PARAM_END);
			State = 293; methodSource();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_GENERIC) {
				{
				State = 294; genericList();
				}
			}

			State = 297; Match(BODY_BEGIN);
			State = 298; methodBody();
			State = 299; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParentTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodParentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodParentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParentTypeContext methodParentType() {
		MethodParentTypeContext _localctx = new MethodParentTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodParentType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodRefContext : ParserRuleContext {
		public MethodParentTypeContext methodParentType() {
			return GetRuleContext<MethodParentTypeContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public MethodRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodRefContext methodRef() {
		MethodRefContext _localctx = new MethodRefContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodRef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; methodParentType();
			State = 304; Match(JUNCTION);
			State = 305; methodName();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 306; genericParameterList();
				}
			}

			State = 309; Match(PARAM_BEGIN);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << EXCLAMATION) | (1L << ARRAY) | (1L << PRIMITIVE_INT) | (1L << PRIMITIVE_UINT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_ULONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_USHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_UBYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_R4) | (1L << PRIMITIVE_R8) | (1L << PRIMITIVE_STRING) | (1L << PRIMITIVE_OBJECT) | (1L << PRIMITIVE_BOOL))) != 0)) {
				{
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 310; type();
						State = 311; Match(COMMA);
						}
						} 
					}
					State = 317;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 318; type();
				}
			}

			State = 321; Match(PARAM_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefContext : ParserRuleContext {
		public ITerminalNode KEY_FIELD() { return GetToken(Assemblier.KEY_FIELD, 0); }
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode MODIFIER_THREAD_LOCAL() { return GetToken(Assemblier.MODIFIER_THREAD_LOCAL, 0); }
		public ITerminalNode MODIFIER_VOLATILE() { return GetToken(Assemblier.MODIFIER_VOLATILE, 0); }
		public ITerminalNode MODIFIER_CONSTANT() { return GetToken(Assemblier.MODIFIER_CONSTANT, 0); }
		public ITerminalNode MODIFIER_READONLY() { return GetToken(Assemblier.MODIFIER_READONLY, 0); }
		public FieldDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefContext fieldDef() {
		FieldDefContext _localctx = new FieldDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(KEY_FIELD);
			State = 324; modifierAccess();
			State = 325; modifierLife();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_THREAD_LOCAL) {
				{
				State = 326; Match(MODIFIER_THREAD_LOCAL);
				}
			}

			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_VOLATILE) | (1L << MODIFIER_CONSTANT) | (1L << MODIFIER_READONLY))) != 0)) {
				{
				State = 329;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_VOLATILE) | (1L << MODIFIER_CONSTANT) | (1L << MODIFIER_READONLY))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 332; type();
			State = 333; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldRefContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public FieldRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldRefContext fieldRef() {
		FieldRefContext _localctx = new FieldRefContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; type();
			State = 336; Match(JUNCTION);
			State = 337; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertyGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyGet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyGet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetContext propertyGet() {
		PropertyGetContext _localctx = new PropertyGetContext(Context, State);
		EnterRule(_localctx, 38, RULE_propertyGet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(PROPERTY_GET);
			State = 340; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertySet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertySet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetContext propertySet() {
		PropertySetContext _localctx = new PropertySetContext(Context, State);
		EnterRule(_localctx, 40, RULE_propertySet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(PROPERTY_SET);
			State = 343; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefContext : ParserRuleContext {
		public ITerminalNode KEY_PROPERTY() { return GetToken(Assemblier.KEY_PROPERTY, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyGetContext propertyGet() {
			return GetRuleContext<PropertyGetContext>(0);
		}
		public PropertySetContext propertySet() {
			return GetRuleContext<PropertySetContext>(0);
		}
		public PropertyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefContext propertyDef() {
		PropertyDefContext _localctx = new PropertyDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_propertyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(KEY_PROPERTY);
			State = 346; type();
			State = 347; Match(IDENTIFIER);
			State = 348; Match(BODY_BEGIN);
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET) {
				{
				State = 349; propertyGet();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_SET) {
				{
				State = 352; propertySet();
				}
			}

			State = 355; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAddContext : ParserRuleContext {
		public ITerminalNode EVENT_ADD() { return GetToken(Assemblier.EVENT_ADD, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public EventAddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAdd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventAddContext eventAdd() {
		EventAddContext _localctx = new EventAddContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventAdd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(EVENT_ADD);
			State = 358; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRemoveContext : ParserRuleContext {
		public ITerminalNode EVENT_REMOVE() { return GetToken(Assemblier.EVENT_REMOVE, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public EventRemoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRemove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventRemove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventRemove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRemove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRemoveContext eventRemove() {
		EventRemoveContext _localctx = new EventRemoveContext(Context, State);
		EnterRule(_localctx, 46, RULE_eventRemove);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(EVENT_REMOVE);
			State = 361; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefContext : ParserRuleContext {
		public ITerminalNode KEY_EVENT() { return GetToken(Assemblier.KEY_EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public EventAddContext eventAdd() {
			return GetRuleContext<EventAddContext>(0);
		}
		public EventRemoveContext eventRemove() {
			return GetRuleContext<EventRemoveContext>(0);
		}
		public EventDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefContext eventDef() {
		EventDefContext _localctx = new EventDefContext(Context, State);
		EnterRule(_localctx, 48, RULE_eventDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(KEY_EVENT);
			State = 364; type();
			State = 365; Match(IDENTIFIER);
			State = 366; Match(BODY_BEGIN);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENT_ADD) {
				{
				State = 367; eventAdd();
				}
			}

			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENT_REMOVE) {
				{
				State = 370; eventRemove();
				}
			}

			State = 373; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritOrImplementTypeContext : ParserRuleContext {
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public GenericParameterRefContext genericParameterRef() {
			return GetRuleContext<GenericParameterRefContext>(0);
		}
		public ITerminalNode PRIMITIVE_OBJECT() { return GetToken(Assemblier.PRIMITIVE_OBJECT, 0); }
		public InheritOrImplementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritOrImplementType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterInheritOrImplementType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitInheritOrImplementType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritOrImplementType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritOrImplementTypeContext inheritOrImplementType() {
		InheritOrImplementTypeContext _localctx = new InheritOrImplementTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_inheritOrImplementType);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LMID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375; typeRef();
				}
				break;
			case EXCLAMATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; genericParameterRef();
				}
				break;
			case PRIMITIVE_OBJECT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 377; Match(PRIMITIVE_OBJECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefListContext : ParserRuleContext {
		public InheritOrImplementTypeContext[] inheritOrImplementType() {
			return GetRuleContexts<InheritOrImplementTypeContext>();
		}
		public InheritOrImplementTypeContext inheritOrImplementType(int i) {
			return GetRuleContext<InheritOrImplementTypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public TypeRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefListContext typeRefList() {
		TypeRefListContext _localctx = new TypeRefListContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 380; inheritOrImplementType();
					State = 381; Match(COMMA);
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 388; inheritOrImplementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementListContext : ParserRuleContext {
		public ITerminalNode KEY_IMPLEMENT() { return GetToken(Assemblier.KEY_IMPLEMENT, 0); }
		public TypeRefListContext typeRefList() {
			return GetRuleContext<TypeRefListContext>(0);
		}
		public ImplementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterImplementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitImplementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementListContext implementList() {
		ImplementListContext _localctx = new ImplementListContext(Context, State);
		EnterRule(_localctx, 54, RULE_implementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(KEY_IMPLEMENT);
			State = 391; typeRefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInheritContext : ParserRuleContext {
		public ITerminalNode KEY_INHERIT() { return GetToken(Assemblier.KEY_INHERIT, 0); }
		public InheritOrImplementTypeContext inheritOrImplementType() {
			return GetRuleContext<InheritOrImplementTypeContext>(0);
		}
		public TypeInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInheritContext typeInherit() {
		TypeInheritContext _localctx = new TypeInheritContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(KEY_INHERIT);
			State = 394; inheritOrImplementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyRefContext : ParserRuleContext {
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public AssemblyRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterAssemblyRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitAssemblyRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyRefContext assemblyRef() {
		AssemblyRefContext _localctx = new AssemblyRefContext(Context, State);
		EnterRule(_localctx, 58, RULE_assemblyRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(LMID);
			State = 397; Match(IDENTIFIER);
			State = 398; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		public AssemblyRefContext assemblyRef() {
			return GetRuleContext<AssemblyRefContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; assemblyRef();
			State = 401; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeRefNodeContext[] typeRefNode() {
			return GetRuleContexts<TypeRefNodeContext>();
		}
		public TypeRefNodeContext typeRefNode(int i) {
			return GetRuleContext<TypeRefNodeContext>(i);
		}
		public TypeRefNamespaceContext typeRefNamespace() {
			return GetRuleContext<TypeRefNamespaceContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(Assemblier.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Assemblier.DOT, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LMID) {
				{
				State = 403; typeRefNamespace();
				}
			}

			State = 411;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 406; typeRefNode();
					State = 407; Match(DOT);
					}
					} 
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 414; typeRefNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefNamespaceContext : ParserRuleContext {
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public NamespaceValueContext namespaceValue() {
			return GetRuleContext<NamespaceValueContext>(0);
		}
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public TypeRefNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefNamespaceContext typeRefNamespace() {
		TypeRefNamespaceContext _localctx = new TypeRefNamespaceContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeRefNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(LMID);
			State = 417; namespaceValue();
			State = 418; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefGenericContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public TypeRefGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefGeneric; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefGeneric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefGeneric(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefGenericContext typeRefGeneric() {
		TypeRefGenericContext _localctx = new TypeRefGenericContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeRefGeneric);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(IDENTIFIER);
			State = 421; Match(LBRACE);
			State = 427;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 422; type();
					State = 423; Match(COMMA);
					}
					} 
				}
				State = 429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 430; type();
			State = 431; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefPlainContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public TypeRefPlainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefPlain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefPlain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefPlain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefPlain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefPlainContext typeRefPlain() {
		TypeRefPlainContext _localctx = new TypeRefPlainContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeRefPlain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefNodeContext : ParserRuleContext {
		public TypeRefGenericContext typeRefGeneric() {
			return GetRuleContext<TypeRefGenericContext>(0);
		}
		public TypeRefPlainContext typeRefPlain() {
			return GetRuleContext<TypeRefPlainContext>(0);
		}
		public TypeRefNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefNodeContext typeRefNode() {
		TypeRefNodeContext _localctx = new TypeRefNodeContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeRefNode);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435; typeRefGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436; typeRefPlain();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode PRIMITIVE_INT() { return GetToken(Assemblier.PRIMITIVE_INT, 0); }
		public ITerminalNode PRIMITIVE_UINT() { return GetToken(Assemblier.PRIMITIVE_UINT, 0); }
		public ITerminalNode PRIMITIVE_LONG() { return GetToken(Assemblier.PRIMITIVE_LONG, 0); }
		public ITerminalNode PRIMITIVE_ULONG() { return GetToken(Assemblier.PRIMITIVE_ULONG, 0); }
		public ITerminalNode PRIMITIVE_SHORT() { return GetToken(Assemblier.PRIMITIVE_SHORT, 0); }
		public ITerminalNode PRIMITIVE_USHORT() { return GetToken(Assemblier.PRIMITIVE_USHORT, 0); }
		public ITerminalNode PRIMITIVE_BYTE() { return GetToken(Assemblier.PRIMITIVE_BYTE, 0); }
		public ITerminalNode PRIMITIVE_UBYTE() { return GetToken(Assemblier.PRIMITIVE_UBYTE, 0); }
		public ITerminalNode PRIMITIVE_CHAR() { return GetToken(Assemblier.PRIMITIVE_CHAR, 0); }
		public ITerminalNode PRIMITIVE_R4() { return GetToken(Assemblier.PRIMITIVE_R4, 0); }
		public ITerminalNode PRIMITIVE_R8() { return GetToken(Assemblier.PRIMITIVE_R8, 0); }
		public ITerminalNode PRIMITIVE_STRING() { return GetToken(Assemblier.PRIMITIVE_STRING, 0); }
		public ITerminalNode PRIMITIVE_OBJECT() { return GetToken(Assemblier.PRIMITIVE_OBJECT, 0); }
		public ITerminalNode PRIMITIVE_BOOL() { return GetToken(Assemblier.PRIMITIVE_BOOL, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIMITIVE_INT) | (1L << PRIMITIVE_UINT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_ULONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_USHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_UBYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_R4) | (1L << PRIMITIVE_R8) | (1L << PRIMITIVE_STRING) | (1L << PRIMITIVE_OBJECT) | (1L << PRIMITIVE_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 74, RULE_genericParameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(LBRACE);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 442; type();
					State = 443; Match(COMMA);
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 450; type();
			State = 451; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public InteriorRefTypeContext interiorRefType() {
			return GetRuleContext<InteriorRefTypeContext>(0);
		}
		public GenericParameterRefContext genericParameterRef() {
			return GetRuleContext<GenericParameterRefContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 453; primitiveType();
				}
				break;
			case 2:
				{
				State = 454; typeRef();
				}
				break;
			case 3:
				{
				State = 455; arrayType();
				}
				break;
			case 4:
				{
				State = 456; interiorRefType();
				}
				break;
			case 5:
				{
				State = 457; genericParameterRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterRefContext : ParserRuleContext {
		public ITerminalNode EXCLAMATION() { return GetToken(Assemblier.EXCLAMATION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public GenericParameterRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterGenericParameterRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitGenericParameterRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterRefContext genericParameterRef() {
		GenericParameterRefContext _localctx = new GenericParameterRefContext(Context, State);
		EnterRule(_localctx, 78, RULE_genericParameterRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(EXCLAMATION);
			State = 461; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public NestArrayTypeContext nestArrayType() {
			return GetRuleContext<NestArrayTypeContext>(0);
		}
		public MultidimensionArrayTypeContext multidimensionArrayType() {
			return GetRuleContext<MultidimensionArrayTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_arrayType);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463; nestArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464; multidimensionArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestArrayTypeContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public NestArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterNestArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitNestArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestArrayTypeContext nestArrayType() {
		NestArrayTypeContext _localctx = new NestArrayTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_nestArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(ARRAY);
			State = 468; Match(LBRACE);
			State = 469; type();
			State = 470; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultidimensionArrayTypeContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public MultidimensionArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multidimensionArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMultidimensionArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMultidimensionArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultidimensionArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultidimensionArrayTypeContext multidimensionArrayType() {
		MultidimensionArrayTypeContext _localctx = new MultidimensionArrayTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_multidimensionArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(ARRAY);
			State = 473; Match(LBRACE);
			State = 474; type();
			State = 475; Match(COMMA);
			State = 476; Match(INT);
			State = 477; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteriorRefTypeContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(Assemblier.REF, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public InteriorRefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interiorRefType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterInteriorRefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitInteriorRefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteriorRefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteriorRefTypeContext interiorRefType() {
		InteriorRefTypeContext _localctx = new InteriorRefTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_interiorRefType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMITIVE_INT:
			case PRIMITIVE_UINT:
			case PRIMITIVE_LONG:
			case PRIMITIVE_ULONG:
			case PRIMITIVE_SHORT:
			case PRIMITIVE_USHORT:
			case PRIMITIVE_BYTE:
			case PRIMITIVE_UBYTE:
			case PRIMITIVE_CHAR:
			case PRIMITIVE_R4:
			case PRIMITIVE_R8:
			case PRIMITIVE_STRING:
			case PRIMITIVE_OBJECT:
			case PRIMITIVE_BOOL:
				{
				State = 479; primitiveType();
				}
				break;
			case LMID:
				{
				State = 480; typeRef();
				}
				break;
			case ARRAY:
				{
				State = 481; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 484; Match(REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericListContext : ParserRuleContext {
		public ITerminalNode KEY_GENERIC() { return GetToken(Assemblier.KEY_GENERIC, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Assemblier.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Assemblier.IDENTIFIER, i);
		}
		public GenericListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterGenericList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitGenericList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericListContext genericList() {
		GenericListContext _localctx = new GenericListContext(Context, State);
		EnterRule(_localctx, 88, RULE_genericList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(KEY_GENERIC);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 487; Match(IDENTIFIER);
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public MethodDefContext[] methodDef() {
			return GetRuleContexts<MethodDefContext>();
		}
		public MethodDefContext methodDef(int i) {
			return GetRuleContext<MethodDefContext>(i);
		}
		public PropertyDefContext[] propertyDef() {
			return GetRuleContexts<PropertyDefContext>();
		}
		public PropertyDefContext propertyDef(int i) {
			return GetRuleContext<PropertyDefContext>(i);
		}
		public EventDefContext[] eventDef() {
			return GetRuleContexts<EventDefContext>();
		}
		public EventDefContext eventDef(int i) {
			return GetRuleContext<EventDefContext>(i);
		}
		public FieldDefContext[] fieldDef() {
			return GetRuleContexts<FieldDefContext>();
		}
		public FieldDefContext fieldDef(int i) {
			return GetRuleContext<FieldDefContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT) | (1L << KEY_METHOD) | (1L << KEY_PROPERTY) | (1L << KEY_EVENT) | (1L << KEY_FIELD))) != 0)) {
				{
				State = 497;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KEY_METHOD:
					{
					State = 492; methodDef();
					}
					break;
				case KEY_PROPERTY:
					{
					State = 493; propertyDef();
					}
					break;
				case KEY_EVENT:
					{
					State = 494; eventDef();
					}
					break;
				case KEY_FIELD:
					{
					State = 495; fieldDef();
					}
					break;
				case KEY_INTERFACE:
				case KEY_CLASS:
				case KEY_STRUCT:
					{
					State = 496; classDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceValueContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Assemblier.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Assemblier.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Assemblier.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Assemblier.DOT, i);
		}
		public NamespaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterNamespaceValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitNamespaceValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceValueContext namespaceValue() {
		NamespaceValueContext _localctx = new NamespaceValueContext(Context, State);
		EnterRule(_localctx, 94, RULE_namespaceValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 504; Match(IDENTIFIER);
					State = 505; Match(DOT);
					}
					} 
				}
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 511; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameSpaceContext : ParserRuleContext {
		public ITerminalNode KEY_NAMESPACE() { return GetToken(Assemblier.KEY_NAMESPACE, 0); }
		public NamespaceValueContext namespaceValue() {
			return GetRuleContext<NamespaceValueContext>(0);
		}
		public ClassNameSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classNameSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassNameSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassNameSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassNameSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameSpaceContext classNameSpace() {
		ClassNameSpaceContext _localctx = new ClassNameSpaceContext(Context, State);
		EnterRule(_localctx, 96, RULE_classNameSpace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(KEY_NAMESPACE);
			State = 514; namespaceValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public ITerminalNode KEY_STRUCT() { return GetToken(Assemblier.KEY_STRUCT, 0); }
		public ITerminalNode KEY_CLASS() { return GetToken(Assemblier.KEY_CLASS, 0); }
		public ITerminalNode KEY_INTERFACE() { return GetToken(Assemblier.KEY_INTERFACE, 0); }
		public ITerminalNode MODIFIER_NEST() { return GetToken(Assemblier.MODIFIER_NEST, 0); }
		public ITerminalNode MODIFIER_ATTRIBUTE() { return GetToken(Assemblier.MODIFIER_ATTRIBUTE, 0); }
		public ClassNameSpaceContext classNameSpace() {
			return GetRuleContext<ClassNameSpaceContext>(0);
		}
		public TypeInheritContext typeInherit() {
			return GetRuleContext<TypeInheritContext>(0);
		}
		public ImplementListContext implementList() {
			return GetRuleContext<ImplementListContext>(0);
		}
		public GenericListContext genericList() {
			return GetRuleContext<GenericListContext>(0);
		}
		public ITerminalNode MODIFIER_ABSTRACT() { return GetToken(Assemblier.MODIFIER_ABSTRACT, 0); }
		public ITerminalNode MODIFIER_SEALED() { return GetToken(Assemblier.MODIFIER_SEALED, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 98, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_NEST) {
				{
				State = 517; Match(MODIFIER_NEST);
				}
			}

			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_ATTRIBUTE) {
				{
				State = 520; Match(MODIFIER_ATTRIBUTE);
				}
			}

			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_ABSTRACT || _la==MODIFIER_SEALED) {
				{
				State = 523;
				_la = TokenStream.LA(1);
				if ( !(_la==MODIFIER_ABSTRACT || _la==MODIFIER_SEALED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 526; modifierAccess();
			State = 527; modifierLife();
			State = 528; className();
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_NAMESPACE) {
				{
				State = 529; classNameSpace();
				}
			}

			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_INHERIT) {
				{
				State = 532; typeInherit();
				}
			}

			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_IMPLEMENT) {
				{
				State = 535; implementList();
				}
			}

			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_GENERIC) {
				{
				State = 538; genericList();
				}
			}

			State = 541; Match(BODY_BEGIN);
			State = 542; classBody();
			State = 543; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode GUID() { return GetToken(Assemblier.GUID, 0); }
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_propertyValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (STRING - 126)) | (1L << (HEX - 126)) | (1L << (INT - 126)) | (1L << (NUMBER - 126)) | (1L << (GUID - 126)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyKeyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public PropertyKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyKeyContext propertyKey() {
		PropertyKeyContext _localctx = new PropertyKeyContext(Context, State);
		EnterRule(_localctx, 102, RULE_propertyKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public PropertyKeyContext propertyKey() {
			return GetRuleContext<PropertyKeyContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(Assemblier.EQ, 0); }
		public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 104, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; propertyKey();
			State = 550; Match(EQ);
			State = 551; propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyDefContext : ParserRuleContext {
		public ITerminalNode KEY_ASSEMBLY() { return GetToken(Assemblier.KEY_ASSEMBLY, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public AssemblyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterAssemblyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitAssemblyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyDefContext assemblyDef() {
		AssemblyDefContext _localctx = new AssemblyDefContext(Context, State);
		EnterRule(_localctx, 106, RULE_assemblyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(KEY_ASSEMBLY);
			State = 554; Match(BODY_BEGIN);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 555; property();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 560; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLabelContext : ParserRuleContext {
		public ITerminalNode IL_PRESUDO_LABEL() { return GetToken(Assemblier.IL_PRESUDO_LABEL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLabelContext opLabel() {
		OpLabelContext _localctx = new OpLabelContext(Context, State);
		EnterRule(_localctx, 108, RULE_opLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(IL_PRESUDO_LABEL);
			State = 563; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdFldContext : ParserRuleContext {
		public ITerminalNode IL_LDFLD() { return GetToken(Assemblier.IL_LDFLD, 0); }
		public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public OpLdFldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdFld; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdFld(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdFld(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdFld(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdFldContext opLdFld() {
		OpLdFldContext _localctx = new OpLdFldContext(Context, State);
		EnterRule(_localctx, 110, RULE_opLdFld);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; Match(IL_LDFLD);
			State = 566; fieldRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdFldAContext : ParserRuleContext {
		public ITerminalNode IL_LDFLDA() { return GetToken(Assemblier.IL_LDFLDA, 0); }
		public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public OpLdFldAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdFldA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdFldA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdFldA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdFldA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdFldAContext opLdFldA() {
		OpLdFldAContext _localctx = new OpLdFldAContext(Context, State);
		EnterRule(_localctx, 112, RULE_opLdFldA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(IL_LDFLDA);
			State = 569; fieldRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdLocContext : ParserRuleContext {
		public ITerminalNode IL_LDLOC() { return GetToken(Assemblier.IL_LDLOC, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpLdLocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdLoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdLoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdLoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdLoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdLocContext opLdLoc() {
		OpLdLocContext _localctx = new OpLdLocContext(Context, State);
		EnterRule(_localctx, 114, RULE_opLdLoc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(IL_LDLOC);
			State = 572; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdLocAContext : ParserRuleContext {
		public ITerminalNode IL_LDLOCA() { return GetToken(Assemblier.IL_LDLOCA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpLdLocAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdLocA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdLocA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdLocA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdLocA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdLocAContext opLdLocA() {
		OpLdLocAContext _localctx = new OpLdLocAContext(Context, State);
		EnterRule(_localctx, 116, RULE_opLdLocA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(IL_LDLOCA);
			State = 575; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdArgContext : ParserRuleContext {
		public ITerminalNode IL_LDARG() { return GetToken(Assemblier.IL_LDARG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpLdArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdArgContext opLdArg() {
		OpLdArgContext _localctx = new OpLdArgContext(Context, State);
		EnterRule(_localctx, 118, RULE_opLdArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(IL_LDARG);
			State = 578; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdArgAContext : ParserRuleContext {
		public ITerminalNode IL_LDARGA() { return GetToken(Assemblier.IL_LDARGA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpLdArgAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdArgA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdArgA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdArgA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdArgA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdArgAContext opLdArgA() {
		OpLdArgAContext _localctx = new OpLdArgAContext(Context, State);
		EnterRule(_localctx, 120, RULE_opLdArgA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(IL_LDARGA);
			State = 581; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdElemContext : ParserRuleContext {
		public ITerminalNode IL_LDELEM() { return GetToken(Assemblier.IL_LDELEM, 0); }
		public OpLdElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdElem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdElem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdElem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdElemContext opLdElem() {
		OpLdElemContext _localctx = new OpLdElemContext(Context, State);
		EnterRule(_localctx, 122, RULE_opLdElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(IL_LDELEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdElemAContext : ParserRuleContext {
		public ITerminalNode IL_LDELEMA() { return GetToken(Assemblier.IL_LDELEMA, 0); }
		public OpLdElemAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdElemA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdElemA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdElemA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdElemA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdElemAContext opLdElemA() {
		OpLdElemAContext _localctx = new OpLdElemAContext(Context, State);
		EnterRule(_localctx, 124, RULE_opLdElemA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585; Match(IL_LDELEMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdIndContext : ParserRuleContext {
		public ITerminalNode IL_LDIND() { return GetToken(Assemblier.IL_LDIND, 0); }
		public OpLdIndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdInd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdInd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdInd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdInd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdIndContext opLdInd() {
		OpLdIndContext _localctx = new OpLdIndContext(Context, State);
		EnterRule(_localctx, 126, RULE_opLdInd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; Match(IL_LDIND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdStrContext : ParserRuleContext {
		public ITerminalNode IL_LDSTR() { return GetToken(Assemblier.IL_LDSTR, 0); }
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public OpLdStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdStr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdStrContext opLdStr() {
		OpLdStrContext _localctx = new OpLdStrContext(Context, State);
		EnterRule(_localctx, 128, RULE_opLdStr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(IL_LDSTR);
			State = 590; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpConstantContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode KEY_TRUE() { return GetToken(Assemblier.KEY_TRUE, 0); }
		public ITerminalNode KEY_FALSE() { return GetToken(Assemblier.KEY_FALSE, 0); }
		public OpConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpConstantContext opConstant() {
		OpConstantContext _localctx = new OpConstantContext(Context, State);
		EnterRule(_localctx, 130, RULE_opConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_la = TokenStream.LA(1);
			if ( !(_la==KEY_TRUE || _la==KEY_FALSE || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (HEX - 127)) | (1L << (INT - 127)) | (1L << (NUMBER - 127)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdCContext : ParserRuleContext {
		public ITerminalNode IL_LDC() { return GetToken(Assemblier.IL_LDC, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public OpConstantContext opConstant() {
			return GetRuleContext<OpConstantContext>(0);
		}
		public OpLdCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdC; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdCContext opLdC() {
		OpLdCContext _localctx = new OpLdCContext(Context, State);
		EnterRule(_localctx, 132, RULE_opLdC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; Match(IL_LDC);
			State = 595; primitiveType();
			State = 596; opConstant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdFnContext : ParserRuleContext {
		public ITerminalNode IL_LDFN() { return GetToken(Assemblier.IL_LDFN, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public OpLdFnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdFn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdFn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdFn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdFn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdFnContext opLdFn() {
		OpLdFnContext _localctx = new OpLdFnContext(Context, State);
		EnterRule(_localctx, 134, RULE_opLdFn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(IL_LDFN);
			State = 599; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLdNullContext : ParserRuleContext {
		public ITerminalNode IL_LDNULL() { return GetToken(Assemblier.IL_LDNULL, 0); }
		public OpLdNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLdNull; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpLdNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpLdNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLdNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLdNullContext opLdNull() {
		OpLdNullContext _localctx = new OpLdNullContext(Context, State);
		EnterRule(_localctx, 136, RULE_opLdNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601; Match(IL_LDNULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpStFldContext : ParserRuleContext {
		public ITerminalNode IL_STFLD() { return GetToken(Assemblier.IL_STFLD, 0); }
		public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public OpStFldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opStFld; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpStFld(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpStFld(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpStFld(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpStFldContext opStFld() {
		OpStFldContext _localctx = new OpStFldContext(Context, State);
		EnterRule(_localctx, 138, RULE_opStFld);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603; Match(IL_STFLD);
			State = 604; fieldRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpStLocContext : ParserRuleContext {
		public ITerminalNode IL_STLOC() { return GetToken(Assemblier.IL_STLOC, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpStLocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opStLoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpStLoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpStLoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpStLoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpStLocContext opStLoc() {
		OpStLocContext _localctx = new OpStLocContext(Context, State);
		EnterRule(_localctx, 140, RULE_opStLoc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(IL_STLOC);
			State = 607; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpStArgContext : ParserRuleContext {
		public ITerminalNode IL_STARG() { return GetToken(Assemblier.IL_STARG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpStArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opStArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpStArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpStArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpStArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpStArgContext opStArg() {
		OpStArgContext _localctx = new OpStArgContext(Context, State);
		EnterRule(_localctx, 142, RULE_opStArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(IL_STARG);
			State = 610; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpStElemContext : ParserRuleContext {
		public ITerminalNode IL_STELEM() { return GetToken(Assemblier.IL_STELEM, 0); }
		public OpStElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opStElem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpStElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpStElem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpStElem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpStElemContext opStElem() {
		OpStElemContext _localctx = new OpStElemContext(Context, State);
		EnterRule(_localctx, 144, RULE_opStElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(IL_STELEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpStTAContext : ParserRuleContext {
		public ITerminalNode IL_STTA() { return GetToken(Assemblier.IL_STTA, 0); }
		public OpStTAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opStTA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpStTA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpStTA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpStTA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpStTAContext opStTA() {
		OpStTAContext _localctx = new OpStTAContext(Context, State);
		EnterRule(_localctx, 146, RULE_opStTA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(IL_STTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAddContext : ParserRuleContext {
		public ITerminalNode IL_ADD() { return GetToken(Assemblier.IL_ADD, 0); }
		public ITerminalNode IL_ARC() { return GetToken(Assemblier.IL_ARC, 0); }
		public OpAddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAdd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAddContext opAdd() {
		OpAddContext _localctx = new OpAddContext(Context, State);
		EnterRule(_localctx, 148, RULE_opAdd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IL_ARC) {
				{
				State = 616; Match(IL_ARC);
				}
			}

			State = 619; Match(IL_ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpSubContext : ParserRuleContext {
		public ITerminalNode IL_SUB() { return GetToken(Assemblier.IL_SUB, 0); }
		public ITerminalNode IL_ARC() { return GetToken(Assemblier.IL_ARC, 0); }
		public OpSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpSubContext opSub() {
		OpSubContext _localctx = new OpSubContext(Context, State);
		EnterRule(_localctx, 150, RULE_opSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IL_ARC) {
				{
				State = 621; Match(IL_ARC);
				}
			}

			State = 624; Match(IL_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpMulContext : ParserRuleContext {
		public ITerminalNode IL_MUL() { return GetToken(Assemblier.IL_MUL, 0); }
		public ITerminalNode IL_ARC() { return GetToken(Assemblier.IL_ARC, 0); }
		public OpMulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpMulContext opMul() {
		OpMulContext _localctx = new OpMulContext(Context, State);
		EnterRule(_localctx, 152, RULE_opMul);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IL_ARC) {
				{
				State = 626; Match(IL_ARC);
				}
			}

			State = 629; Match(IL_MUL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDivContext : ParserRuleContext {
		public ITerminalNode IL_DIV() { return GetToken(Assemblier.IL_DIV, 0); }
		public ITerminalNode IL_ARC() { return GetToken(Assemblier.IL_ARC, 0); }
		public OpDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDiv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDiv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDivContext opDiv() {
		OpDivContext _localctx = new OpDivContext(Context, State);
		EnterRule(_localctx, 154, RULE_opDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IL_ARC) {
				{
				State = 631; Match(IL_ARC);
				}
			}

			State = 634; Match(IL_DIV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModContext : ParserRuleContext {
		public ITerminalNode IL_MOD() { return GetToken(Assemblier.IL_MOD, 0); }
		public OpModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModContext opMod() {
		OpModContext _localctx = new OpModContext(Context, State);
		EnterRule(_localctx, 156, RULE_opMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(IL_MOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAndContext : ParserRuleContext {
		public ITerminalNode IL_AND() { return GetToken(Assemblier.IL_AND, 0); }
		public OpAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAndContext opAnd() {
		OpAndContext _localctx = new OpAndContext(Context, State);
		EnterRule(_localctx, 158, RULE_opAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(IL_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpOrContext : ParserRuleContext {
		public ITerminalNode IL_OR() { return GetToken(Assemblier.IL_OR, 0); }
		public OpOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpOrContext opOr() {
		OpOrContext _localctx = new OpOrContext(Context, State);
		EnterRule(_localctx, 160, RULE_opOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(IL_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpXorContext : ParserRuleContext {
		public ITerminalNode IL_XOR() { return GetToken(Assemblier.IL_XOR, 0); }
		public OpXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opXor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpXorContext opXor() {
		OpXorContext _localctx = new OpXorContext(Context, State);
		EnterRule(_localctx, 162, RULE_opXor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642; Match(IL_XOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpNotContext : ParserRuleContext {
		public ITerminalNode IL_NOT() { return GetToken(Assemblier.IL_NOT, 0); }
		public OpNotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opNot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpNotContext opNot() {
		OpNotContext _localctx = new OpNotContext(Context, State);
		EnterRule(_localctx, 164, RULE_opNot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; Match(IL_NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpNegContext : ParserRuleContext {
		public ITerminalNode IL_NEG() { return GetToken(Assemblier.IL_NEG, 0); }
		public OpNegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opNeg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpNeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpNeg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpNeg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpNegContext opNeg() {
		OpNegContext _localctx = new OpNegContext(Context, State);
		EnterRule(_localctx, 166, RULE_opNeg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646; Match(IL_NEG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpConvContext : ParserRuleContext {
		public ITerminalNode IL_CONV() { return GetToken(Assemblier.IL_CONV, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public OpConvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opConv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpConv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpConv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpConv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpConvContext opConv() {
		OpConvContext _localctx = new OpConvContext(Context, State);
		EnterRule(_localctx, 168, RULE_opConv);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; Match(IL_CONV);
			State = 649; primitiveType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCallContext : ParserRuleContext {
		public ITerminalNode IL_CALL() { return GetToken(Assemblier.IL_CALL, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public OpCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCallContext opCall() {
		OpCallContext _localctx = new OpCallContext(Context, State);
		EnterRule(_localctx, 170, RULE_opCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(IL_CALL);
			State = 652; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCallVirtContext : ParserRuleContext {
		public ITerminalNode IL_CALLVIRT() { return GetToken(Assemblier.IL_CALLVIRT, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public OpCallVirtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCallVirt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCallVirt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCallVirt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCallVirt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCallVirtContext opCallVirt() {
		OpCallVirtContext _localctx = new OpCallVirtContext(Context, State);
		EnterRule(_localctx, 172, RULE_opCallVirt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; Match(IL_CALLVIRT);
			State = 655; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpRetContext : ParserRuleContext {
		public ITerminalNode IL_RET() { return GetToken(Assemblier.IL_RET, 0); }
		public OpRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opRet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpRet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpRet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpRetContext opRet() {
		OpRetContext _localctx = new OpRetContext(Context, State);
		EnterRule(_localctx, 174, RULE_opRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(IL_RET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCmpCondContext : ParserRuleContext {
		public ITerminalNode IL_CMP_EQ() { return GetToken(Assemblier.IL_CMP_EQ, 0); }
		public ITerminalNode IL_CMP_NE() { return GetToken(Assemblier.IL_CMP_NE, 0); }
		public ITerminalNode IL_CMP_GE() { return GetToken(Assemblier.IL_CMP_GE, 0); }
		public ITerminalNode IL_CMP_GT() { return GetToken(Assemblier.IL_CMP_GT, 0); }
		public ITerminalNode IL_CMP_LE() { return GetToken(Assemblier.IL_CMP_LE, 0); }
		public ITerminalNode IL_CMP_LT() { return GetToken(Assemblier.IL_CMP_LT, 0); }
		public OpCmpCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCmpCond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCmpCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCmpCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCmpCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCmpCondContext opCmpCond() {
		OpCmpCondContext _localctx = new OpCmpCondContext(Context, State);
		EnterRule(_localctx, 176, RULE_opCmpCond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IL_CMP_EQ - 71)) | (1L << (IL_CMP_NE - 71)) | (1L << (IL_CMP_GT - 71)) | (1L << (IL_CMP_LT - 71)) | (1L << (IL_CMP_GE - 71)) | (1L << (IL_CMP_LE - 71)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCmpContext : ParserRuleContext {
		public ITerminalNode IL_CMP() { return GetToken(Assemblier.IL_CMP, 0); }
		public OpCmpCondContext opCmpCond() {
			return GetRuleContext<OpCmpCondContext>(0);
		}
		public OpCmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCmp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCmpContext opCmp() {
		OpCmpContext _localctx = new OpCmpContext(Context, State);
		EnterRule(_localctx, 178, RULE_opCmp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; Match(IL_CMP);
			State = 662; opCmpCond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpJccContext : ParserRuleContext {
		public ITerminalNode IL_JCC() { return GetToken(Assemblier.IL_JCC, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpJccContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opJcc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpJcc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpJcc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpJcc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpJccContext opJcc() {
		OpJccContext _localctx = new OpJccContext(Context, State);
		EnterRule(_localctx, 180, RULE_opJcc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(IL_JCC);
			State = 665; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpJmpContext : ParserRuleContext {
		public ITerminalNode IL_JMP() { return GetToken(Assemblier.IL_JMP, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpJmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opJmp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpJmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpJmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpJmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpJmpContext opJmp() {
		OpJmpContext _localctx = new OpJmpContext(Context, State);
		EnterRule(_localctx, 182, RULE_opJmp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; Match(IL_JMP);
			State = 668; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpThrowContext : ParserRuleContext {
		public ITerminalNode IL_THROW() { return GetToken(Assemblier.IL_THROW, 0); }
		public OpThrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opThrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpThrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpThrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpThrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpThrowContext opThrow() {
		OpThrowContext _localctx = new OpThrowContext(Context, State);
		EnterRule(_localctx, 184, RULE_opThrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670; Match(IL_THROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpTryContext : ParserRuleContext {
		public ITerminalNode IL_TRY() { return GetToken(Assemblier.IL_TRY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public OpTryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opTry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpTry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpTry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpTryContext opTry() {
		OpTryContext _localctx = new OpTryContext(Context, State);
		EnterRule(_localctx, 186, RULE_opTry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; Match(IL_TRY);
			State = 673; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCatchContext : ParserRuleContext {
		public ITerminalNode IL_CATCH() { return GetToken(Assemblier.IL_CATCH, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public OpCatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCatch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCatchContext opCatch() {
		OpCatchContext _localctx = new OpCatchContext(Context, State);
		EnterRule(_localctx, 188, RULE_opCatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; Match(IL_CATCH);
			State = 676; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpFinallyContext : ParserRuleContext {
		public ITerminalNode IL_FINALLY() { return GetToken(Assemblier.IL_FINALLY, 0); }
		public OpFinallyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opFinally; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpFinally(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpFinally(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpFinally(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpFinallyContext opFinally() {
		OpFinallyContext _localctx = new OpFinallyContext(Context, State);
		EnterRule(_localctx, 190, RULE_opFinally);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(IL_FINALLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpNewContext : ParserRuleContext {
		public ITerminalNode IL_NEW() { return GetToken(Assemblier.IL_NEW, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public OpNewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opNew; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpNew(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpNewContext opNew() {
		OpNewContext _localctx = new OpNewContext(Context, State);
		EnterRule(_localctx, 192, RULE_opNew);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(IL_NEW);
			State = 681; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpNewArrContext : ParserRuleContext {
		public ITerminalNode IL_NEWARRAY() { return GetToken(Assemblier.IL_NEWARRAY, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public OpNewArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opNewArr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpNewArr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpNewArr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpNewArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpNewArrContext opNewArr() {
		OpNewArrContext _localctx = new OpNewArrContext(Context, State);
		EnterRule(_localctx, 194, RULE_opNewArr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; Match(IL_NEWARRAY);
			State = 684; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCastContext : ParserRuleContext {
		public ITerminalNode IL_CAST() { return GetToken(Assemblier.IL_CAST, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public OpCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCastContext opCast() {
		OpCastContext _localctx = new OpCastContext(Context, State);
		EnterRule(_localctx, 196, RULE_opCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; Match(IL_CAST);
			State = 687; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBoxContext : ParserRuleContext {
		public ITerminalNode IL_BOX() { return GetToken(Assemblier.IL_BOX, 0); }
		public OpBoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpBox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpBox(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBox(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBoxContext opBox() {
		OpBoxContext _localctx = new OpBoxContext(Context, State);
		EnterRule(_localctx, 198, RULE_opBox);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; Match(IL_BOX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpUnBoxContext : ParserRuleContext {
		public ITerminalNode IL_UNBOX() { return GetToken(Assemblier.IL_UNBOX, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public OpUnBoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opUnBox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpUnBox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpUnBox(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpUnBox(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpUnBoxContext opUnBox() {
		OpUnBoxContext _localctx = new OpUnBoxContext(Context, State);
		EnterRule(_localctx, 200, RULE_opUnBox);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; Match(IL_UNBOX);
			State = 692; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDupContext : ParserRuleContext {
		public ITerminalNode IL_DUP() { return GetToken(Assemblier.IL_DUP, 0); }
		public OpDupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpDup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpDup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDupContext opDup() {
		OpDupContext _localctx = new OpDupContext(Context, State);
		EnterRule(_localctx, 202, RULE_opDup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(IL_DUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpPopContext : ParserRuleContext {
		public ITerminalNode IL_POP() { return GetToken(Assemblier.IL_POP, 0); }
		public OpPopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opPop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpPop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpPop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpPop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpPopContext opPop() {
		OpPopContext _localctx = new OpPopContext(Context, State);
		EnterRule(_localctx, 204, RULE_opPop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(IL_POP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpNopContext : ParserRuleContext {
		public ITerminalNode IL_NOP() { return GetToken(Assemblier.IL_NOP, 0); }
		public OpNopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opNop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterOpNop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitOpNop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpNop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpNopContext opNop() {
		OpNopContext _localctx = new OpNopContext(Context, State);
		EnterRule(_localctx, 206, RULE_opNop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(IL_NOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IlInstructionContext : ParserRuleContext {
		public OpLabelContext opLabel() {
			return GetRuleContext<OpLabelContext>(0);
		}
		public OpLdFldContext opLdFld() {
			return GetRuleContext<OpLdFldContext>(0);
		}
		public OpLdFldAContext opLdFldA() {
			return GetRuleContext<OpLdFldAContext>(0);
		}
		public OpLdLocContext opLdLoc() {
			return GetRuleContext<OpLdLocContext>(0);
		}
		public OpLdLocAContext opLdLocA() {
			return GetRuleContext<OpLdLocAContext>(0);
		}
		public OpLdArgContext opLdArg() {
			return GetRuleContext<OpLdArgContext>(0);
		}
		public OpLdArgAContext opLdArgA() {
			return GetRuleContext<OpLdArgAContext>(0);
		}
		public OpLdElemContext opLdElem() {
			return GetRuleContext<OpLdElemContext>(0);
		}
		public OpLdElemAContext opLdElemA() {
			return GetRuleContext<OpLdElemAContext>(0);
		}
		public OpLdStrContext opLdStr() {
			return GetRuleContext<OpLdStrContext>(0);
		}
		public OpLdCContext opLdC() {
			return GetRuleContext<OpLdCContext>(0);
		}
		public OpLdFnContext opLdFn() {
			return GetRuleContext<OpLdFnContext>(0);
		}
		public OpLdIndContext opLdInd() {
			return GetRuleContext<OpLdIndContext>(0);
		}
		public OpLdNullContext opLdNull() {
			return GetRuleContext<OpLdNullContext>(0);
		}
		public OpStFldContext opStFld() {
			return GetRuleContext<OpStFldContext>(0);
		}
		public OpStLocContext opStLoc() {
			return GetRuleContext<OpStLocContext>(0);
		}
		public OpStArgContext opStArg() {
			return GetRuleContext<OpStArgContext>(0);
		}
		public OpStElemContext opStElem() {
			return GetRuleContext<OpStElemContext>(0);
		}
		public OpStTAContext opStTA() {
			return GetRuleContext<OpStTAContext>(0);
		}
		public OpAddContext opAdd() {
			return GetRuleContext<OpAddContext>(0);
		}
		public OpSubContext opSub() {
			return GetRuleContext<OpSubContext>(0);
		}
		public OpMulContext opMul() {
			return GetRuleContext<OpMulContext>(0);
		}
		public OpDivContext opDiv() {
			return GetRuleContext<OpDivContext>(0);
		}
		public OpModContext opMod() {
			return GetRuleContext<OpModContext>(0);
		}
		public OpAndContext opAnd() {
			return GetRuleContext<OpAndContext>(0);
		}
		public OpOrContext opOr() {
			return GetRuleContext<OpOrContext>(0);
		}
		public OpXorContext opXor() {
			return GetRuleContext<OpXorContext>(0);
		}
		public OpNotContext opNot() {
			return GetRuleContext<OpNotContext>(0);
		}
		public OpNegContext opNeg() {
			return GetRuleContext<OpNegContext>(0);
		}
		public OpConvContext opConv() {
			return GetRuleContext<OpConvContext>(0);
		}
		public OpCallContext opCall() {
			return GetRuleContext<OpCallContext>(0);
		}
		public OpCallVirtContext opCallVirt() {
			return GetRuleContext<OpCallVirtContext>(0);
		}
		public OpRetContext opRet() {
			return GetRuleContext<OpRetContext>(0);
		}
		public OpCmpContext opCmp() {
			return GetRuleContext<OpCmpContext>(0);
		}
		public OpJccContext opJcc() {
			return GetRuleContext<OpJccContext>(0);
		}
		public OpJmpContext opJmp() {
			return GetRuleContext<OpJmpContext>(0);
		}
		public OpThrowContext opThrow() {
			return GetRuleContext<OpThrowContext>(0);
		}
		public OpTryContext opTry() {
			return GetRuleContext<OpTryContext>(0);
		}
		public OpCatchContext opCatch() {
			return GetRuleContext<OpCatchContext>(0);
		}
		public OpFinallyContext opFinally() {
			return GetRuleContext<OpFinallyContext>(0);
		}
		public OpNewContext opNew() {
			return GetRuleContext<OpNewContext>(0);
		}
		public OpNewArrContext opNewArr() {
			return GetRuleContext<OpNewArrContext>(0);
		}
		public OpDupContext opDup() {
			return GetRuleContext<OpDupContext>(0);
		}
		public OpPopContext opPop() {
			return GetRuleContext<OpPopContext>(0);
		}
		public OpNopContext opNop() {
			return GetRuleContext<OpNopContext>(0);
		}
		public IlInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterIlInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitIlInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IlInstructionContext ilInstruction() {
		IlInstructionContext _localctx = new IlInstructionContext(Context, State);
		EnterRule(_localctx, 208, RULE_ilInstruction);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700; opLabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701; opLdFld();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 702; opLdFldA();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 703; opLdLoc();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 704; opLdLocA();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 705; opLdArg();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 706; opLdArgA();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 707; opLdElem();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 708; opLdElemA();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 709; opLdStr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 710; opLdC();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 711; opLdFn();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 712; opLdInd();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 713; opLdNull();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 714; opStFld();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 715; opStLoc();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 716; opStArg();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 717; opStElem();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 718; opStTA();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 719; opAdd();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 720; opSub();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 721; opMul();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 722; opDiv();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 723; opMod();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 724; opAnd();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 725; opOr();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 726; opXor();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 727; opNot();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 728; opNeg();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 729; opConv();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 730; opCall();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 731; opCallVirt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 732; opRet();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 733; opCmp();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 734; opJcc();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 735; opJmp();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 736; opThrow();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 737; opTry();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 738; opCatch();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 739; opFinally();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 740; opNew();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 741; opNewArr();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 742; opDup();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 743; opPop();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 744; opNop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x85', '\x2EE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xD7', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\xDA', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xE6', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xE9', '\v', '\x6', '\x5', '\x6', 
		'\xEB', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xEF', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xFC', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\x104', '\n', 
		'\f', '\r', '\f', '\xE', '\f', '\x105', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\x10D', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\x10E', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x5', '\xF', '\x116', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x11C', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x121', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x12A', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x136', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x13C', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x13F', '\v', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x142', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x14A', '\n', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x14D', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x161', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x164', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x173', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x176', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x17D', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x182', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x185', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x5', '!', '\x197', '\n', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x19C', '\n', '!', 
		'\f', '!', '\xE', '!', '\x19F', '\v', '!', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\a', '#', '\x1AC', '\n', '#', '\f', '#', 
		'\xE', '#', '\x1AF', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x1B8', '\n', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\a', '\'', '\x1C0', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1C3', 
		'\v', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1CD', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x1D4', '\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1E5', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x6', '.', 
		'\x1EB', '\n', '.', '\r', '.', '\xE', '.', '\x1EC', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x1F4', '\n', '/', 
		'\f', '/', '\xE', '/', '\x1F7', '\v', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x1FD', '\n', '\x31', '\f', 
		'\x31', '\xE', '\x31', '\x200', '\v', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x209', '\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x20C', 
		'\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x20F', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x215', 
		'\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x218', '\n', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x21B', '\n', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x21E', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x6', '\x37', '\x22F', '\n', '\x37', '\r', '\x37', 
		'\xE', '\x37', '\x230', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x5', 'L', '\x26C', '\n', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x5', 'M', '\x271', '\n', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x5', 'N', '\x276', '\n', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x5', 'O', '\x27B', '\n', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', 
		'\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'U', 
		'\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', 
		'\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 
		'j', '\x2EC', '\n', 'j', '\x3', 'j', '\x2', '\x2', 'k', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\x2', '\r', '\x3', '\x2', 
		'*', '-', '\x3', '\x2', '\"', '#', '\x4', '\x2', '\x30', '\x30', '\x85', 
		'\x85', '\x3', '\x2', '\x45', '\x46', '\x4', '\x2', '$', '$', '&', '\'', 
		'\x3', '\x2', '\x33', '@', '\x3', '\x2', '\x15', '\x17', '\x4', '\x2', 
		'\x1F', '\x1F', '!', '!', '\x3', '\x2', '\x80', '\x84', '\x4', '\x2', 
		'.', '/', '\x81', '\x83', '\x3', '\x2', 'I', 'N', '\x2', '\x2E6', '\x2', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\x4', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xDD', '\x3', '\x2', '\x2', '\x2', '\b', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xEA', '\x3', '\x2', '\x2', '\x2', '\f', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x16', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x112', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x119', '\x3', '\x2', '\x2', '\x2', ' ', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x145', '\x3', '\x2', '\x2', '\x2', '&', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x155', '\x3', '\x2', '\x2', '\x2', '*', '\x158', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x167', '\x3', '\x2', '\x2', '\x2', '\x30', '\x16A', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x188', '\x3', '\x2', '\x2', '\x2', ':', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x18E', '\x3', '\x2', '\x2', '\x2', '>', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1A6', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1B3', '\x3', '\x2', '\x2', '\x2', 'H', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1BB', '\x3', '\x2', '\x2', '\x2', 'N', '\x1CC', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1CE', '\x3', '\x2', '\x2', '\x2', 'R', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1DA', '\x3', '\x2', '\x2', '\x2', 'X', '\x1E4', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\\', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x62', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x206', '\x3', '\x2', '\x2', '\x2', '\x66', '\x223', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x227', '\x3', '\x2', '\x2', '\x2', 'l', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x234', '\x3', '\x2', '\x2', '\x2', 'p', '\x237', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		't', '\x23D', '\x3', '\x2', '\x2', '\x2', 'v', '\x240', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x243', '\x3', '\x2', '\x2', '\x2', 'z', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x80', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x84', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x258', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x266', '\x3', '\x2', '\x2', '\x2', '\x94', '\x268', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x98', '\x270', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x27E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x280', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x286', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x288', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x28A', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x293', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x295', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x297', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x2A2', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x2B0', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x2B8', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x2BC', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD8', 
		'\x5', 'l', '\x37', '\x2', '\xD5', '\xD7', '\x5', '\x64', '\x33', '\x2', 
		'\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\t', '\x2', 
		'\x2', '\x2', '\xDC', '\x5', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\t', '\x3', '\x2', '\x2', '\xDE', '\a', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', 'N', '(', '\x2', '\xE0', '\xE1', '\a', '\x85', '\x2', '\x2', 
		'\xE1', '\t', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', '\b', 
		'\x5', '\x2', '\xE3', '\xE4', '\a', '\xE', '\x2', '\x2', '\xE4', '\xE6', 
		'\x5', '\b', '\x5', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\v', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEF', 
		'\a', '\x32', '\x2', '\x2', '\xED', '\xEF', '\x5', 'N', '(', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\t', 
		'\x4', '\x2', '\x2', '\xF1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF3', '\a', '\x42', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x6', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '\x80', '\x2', '\x2', '\xF5', '\xF6', '\a', 
		'\xE', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x80', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\a', '\x2', '\x2', '\xF8', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFC', '\a', '\x41', '\x2', '\x2', '\xFA', '\xFC', '\x5', 
		'\x10', '\t', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x5', 'N', '(', '\x2', '\xFE', '\xFF', '\a', '\x85', 
		'\x2', '\x2', '\xFF', '\x15', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\x43', '\x2', '\x2', '\x101', '\x103', '\a', '\b', '\x2', '\x2', 
		'\x102', '\x104', '\x5', '\x14', '\v', '\x2', '\x103', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\t', '\x2', '\x2', '\x108', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\a', '\x44', '\x2', '\x2', '\x10A', '\x10C', '\a', 
		'\b', '\x2', '\x2', '\x10B', '\x10D', '\x5', '\xD2', 'j', '\x2', '\x10C', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\a', '\t', '\x2', '\x2', '\x111', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x112', '\x113', '\t', '\x5', '\x2', '\x2', '\x113', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x116', '\x5', '\x16', '\f', '\x2', 
		'\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\x5', '\x18', '\r', '\x2', '\x118', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11B', '\a', '\x18', '\x2', '\x2', '\x11A', '\x11C', 
		'\x5', '\x1A', '\xE', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\x5', '\x4', '\x3', '\x2', '\x11E', 
		'\x120', '\x5', '\x6', '\x4', '\x2', '\x11F', '\x121', '\a', ' ', '\x2', 
		'\x2', '\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x123', '\x5', '\f', '\a', '\x2', '\x123', '\x124', '\x5', '\xE', 
		'\b', '\x2', '\x124', '\x125', '\a', '\n', '\x2', '\x2', '\x125', '\x126', 
		'\x5', '\n', '\x6', '\x2', '\x126', '\x127', '\a', '\v', '\x2', '\x2', 
		'\x127', '\x129', '\x5', '\x12', '\n', '\x2', '\x128', '\x12A', '\x5', 
		'Z', '.', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '\b', '\x2', '\x2', '\x12C', '\x12D', '\x5', 
		'\x1C', '\xF', '\x2', '\x12D', '\x12E', '\a', '\t', '\x2', '\x2', '\x12E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x5', 'N', '(', 
		'\x2', '\x130', '!', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x5', 
		' ', '\x11', '\x2', '\x132', '\x133', '\a', '\x10', '\x2', '\x2', '\x133', 
		'\x135', '\x5', '\xE', '\b', '\x2', '\x134', '\x136', '\x5', 'L', '\'', 
		'\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x141', '\a', '\n', '\x2', '\x2', '\x138', '\x139', '\x5', 'N', 
		'(', '\x2', '\x139', '\x13A', '\a', '\xE', '\x2', '\x2', '\x13A', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x142', '\x5', 'N', '(', '\x2', '\x141', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', '\v', '\x2', 
		'\x2', '\x144', '#', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', 
		'\x1B', '\x2', '\x2', '\x146', '\x147', '\x5', '\x4', '\x3', '\x2', '\x147', 
		'\x149', '\x5', '\x6', '\x4', '\x2', '\x148', '\x14A', '\a', '%', '\x2', 
		'\x2', '\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14D', '\t', '\x6', '\x2', '\x2', '\x14C', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x5', 'N', '(', 
		'\x2', '\x14F', '\x150', '\a', '\x85', '\x2', '\x2', '\x150', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\x5', 'N', '(', '\x2', '\x152', 
		'\x153', '\a', '\x10', '\x2', '\x2', '\x153', '\x154', '\a', '\x85', '\x2', 
		'\x2', '\x154', '\'', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\a', 
		'\x45', '\x2', '\x2', '\x156', '\x157', '\x5', '\"', '\x12', '\x2', '\x157', 
		')', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', '\x46', '\x2', 
		'\x2', '\x159', '\x15A', '\x5', '\"', '\x12', '\x2', '\x15A', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', '\x19', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', 'N', '(', '\x2', '\x15D', '\x15E', '\a', '\x85', '\x2', 
		'\x2', '\x15E', '\x160', '\a', '\b', '\x2', '\x2', '\x15F', '\x161', '\x5', 
		'(', '\x15', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x164', '\x5', '*', '\x16', '\x2', '\x163', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', 
		'\t', '\x2', '\x2', '\x166', '-', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x168', '\a', 'G', '\x2', '\x2', '\x168', '\x169', '\x5', '\"', '\x12', 
		'\x2', '\x169', '/', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', 
		'H', '\x2', '\x2', '\x16B', '\x16C', '\x5', '\"', '\x12', '\x2', '\x16C', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\a', '\x1A', '\x2', 
		'\x2', '\x16E', '\x16F', '\x5', 'N', '(', '\x2', '\x16F', '\x170', '\a', 
		'\x85', '\x2', '\x2', '\x170', '\x172', '\a', '\b', '\x2', '\x2', '\x171', 
		'\x173', '\x5', '.', '\x18', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', '\x173', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x176', '\x5', '\x30', '\x19', '\x2', 
		'\x175', '\x174', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\a', '\t', '\x2', '\x2', '\x178', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17D', '\x5', '>', ' ', '\x2', '\x17A', '\x17D', '\x5', 
		'P', ')', '\x2', '\x17B', '\x17D', '\a', '?', '\x2', '\x2', '\x17C', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\x5', '\x34', '\x1B', '\x2', '\x17F', 
		'\x180', '\a', '\xE', '\x2', '\x2', '\x180', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x182', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x187', '\x5', '\x34', '\x1B', '\x2', '\x187', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x188', '\x189', '\a', '\x1D', '\x2', '\x2', '\x189', '\x18A', 
		'\x5', '\x36', '\x1C', '\x2', '\x18A', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18C', '\a', '\x1C', '\x2', '\x2', '\x18C', '\x18D', '\x5', 
		'\x34', '\x1B', '\x2', '\x18D', ';', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\a', '\x6', '\x2', '\x2', '\x18F', '\x190', '\a', '\x85', '\x2', 
		'\x2', '\x190', '\x191', '\a', '\a', '\x2', '\x2', '\x191', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x193', '\x5', '<', '\x1F', '\x2', '\x193', 
		'\x194', '\x5', '@', '!', '\x2', '\x194', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x197', '\x5', '\x42', '\"', '\x2', '\x196', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x5', 'H', '%', 
		'\x2', '\x199', '\x19A', '\a', '\r', '\x2', '\x2', '\x19A', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\x5', 'H', '%', '\x2', '\x1A1', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x6', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\x5', '`', '\x31', '\x2', '\x1A4', '\x1A5', '\a', '\a', '\x2', '\x2', 
		'\x1A5', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x85', 
		'\x2', '\x2', '\x1A7', '\x1AD', '\a', '\x4', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\x5', 'N', '(', '\x2', '\x1A9', '\x1AA', '\a', '\xE', '\x2', '\x2', '\x1AA', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x5', 'N', '(', '\x2', '\x1B1', 
		'\x1B2', '\a', '\x5', '\x2', '\x2', '\x1B2', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1B4', '\a', '\x85', '\x2', '\x2', '\x1B4', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x5', '\x44', '#', '\x2', '\x1B6', 
		'\x1B8', '\x5', '\x46', '$', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\t', '\a', '\x2', '\x2', '\x1BA', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1C1', '\a', '\x4', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\x5', 'N', '(', '\x2', '\x1BD', '\x1BE', '\a', 
		'\xE', '\x2', '\x2', '\x1BE', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x5', 
		'N', '(', '\x2', '\x1C5', '\x1C6', '\a', '\x5', '\x2', '\x2', '\x1C6', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CD', '\x5', 'J', '&', '\x2', 
		'\x1C8', '\x1CD', '\x5', '>', ' ', '\x2', '\x1C9', '\x1CD', '\x5', 'R', 
		'*', '\x2', '\x1CA', '\x1CD', '\x5', 'X', '-', '\x2', '\x1CB', '\x1CD', 
		'\x5', 'P', ')', '\x2', '\x1CC', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\a', '\x12', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\a', '\x85', '\x2', '\x2', '\x1D0', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D4', '\x5', 'T', '+', '\x2', '\x1D2', '\x1D4', '\x5', 'V', 
		',', '\x2', '\x1D3', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\a', '\x31', '\x2', '\x2', '\x1D6', '\x1D7', '\a', 
		'\x4', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', 'N', '(', '\x2', '\x1D8', 
		'\x1D9', '\a', '\x5', '\x2', '\x2', '\x1D9', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\a', '\x31', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\a', '\x4', '\x2', '\x2', '\x1DC', '\x1DD', '\x5', 'N', '(', '\x2', '\x1DD', 
		'\x1DE', '\a', '\xE', '\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x82', '\x2', 
		'\x2', '\x1DF', '\x1E0', '\a', '\x5', '\x2', '\x2', '\x1E0', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E5', '\x5', 'J', '&', '\x2', '\x1E2', 
		'\x1E5', '\x5', '>', ' ', '\x2', '\x1E3', '\x1E5', '\x5', 'R', '*', '\x2', 
		'\x1E4', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\xF', '\x2', 
		'\x2', '\x1E7', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\a', 
		'\x1E', '\x2', '\x2', '\x1E9', '\x1EB', '\a', '\x85', '\x2', '\x2', '\x1EA', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1F4', '\x5', '\x1E', '\x10', '\x2', '\x1EF', '\x1F4', '\x5', 
		',', '\x17', '\x2', '\x1F0', '\x1F4', '\x5', '\x32', '\x1A', '\x2', '\x1F1', 
		'\x1F4', '\x5', '$', '\x13', '\x2', '\x1F2', '\x1F4', '\x5', '\x64', '\x33', 
		'\x2', '\x1F3', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', ']', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\x85', '\x2', '\x2', '\x1F9', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x85', '\x2', 
		'\x2', '\x1FB', '\x1FD', '\a', '\r', '\x2', '\x2', '\x1FC', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x200', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x201', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', '\x85', '\x2', '\x2', 
		'\x202', '\x61', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '\x13', 
		'\x2', '\x2', '\x204', '\x205', '\x5', '`', '\x31', '\x2', '\x205', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x208', '\t', '\b', '\x2', '\x2', 
		'\x207', '\x209', '\a', ')', '\x2', '\x2', '\x208', '\x207', '\x3', '\x2', 
		'\x2', '\x2', '\x208', '\x209', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20C', '\a', '(', '\x2', '\x2', 
		'\x20B', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20D', 
		'\x20F', '\t', '\t', '\x2', '\x2', '\x20E', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x5', '\x4', '\x3', '\x2', 
		'\x211', '\x212', '\x5', '\x6', '\x4', '\x2', '\x212', '\x214', '\x5', 
		'^', '\x30', '\x2', '\x213', '\x215', '\x5', '\x62', '\x32', '\x2', '\x214', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x217', '\x3', '\x2', '\x2', '\x2', '\x216', '\x218', 
		'\x5', ':', '\x1E', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x218', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21B', '\x5', '\x38', '\x1D', '\x2', '\x21A', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', 
		'\x5', 'Z', '.', '\x2', '\x21D', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x220', '\a', '\b', '\x2', '\x2', '\x220', 
		'\x221', '\x5', '\\', '/', '\x2', '\x221', '\x222', '\a', '\t', '\x2', 
		'\x2', '\x222', '\x65', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', 
		'\t', '\n', '\x2', '\x2', '\x224', 'g', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x226', '\a', '\x85', '\x2', '\x2', '\x226', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x228', '\x5', 'h', '\x35', '\x2', '\x228', '\x229', 
		'\a', '\f', '\x2', '\x2', '\x229', '\x22A', '\x5', '\x66', '\x34', '\x2', 
		'\x22A', 'k', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\a', '\x14', 
		'\x2', '\x2', '\x22C', '\x22E', '\a', '\b', '\x2', '\x2', '\x22D', '\x22F', 
		'\x5', 'j', '\x36', '\x2', '\x22E', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\a', '\t', '\x2', 
		'\x2', '\x233', 'm', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', 
		'O', '\x2', '\x2', '\x235', '\x236', '\a', '\x85', '\x2', '\x2', '\x236', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\a', 'P', '\x2', '\x2', 
		'\x238', '\x239', '\x5', '&', '\x14', '\x2', '\x239', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x23B', '\a', 'Q', '\x2', '\x2', '\x23B', '\x23C', 
		'\x5', '&', '\x14', '\x2', '\x23C', 's', '\x3', '\x2', '\x2', '\x2', '\x23D', 
		'\x23E', '\a', 'R', '\x2', '\x2', '\x23E', '\x23F', '\a', '\x85', '\x2', 
		'\x2', '\x23F', 'u', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\a', 
		'S', '\x2', '\x2', '\x241', '\x242', '\a', '\x85', '\x2', '\x2', '\x242', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\a', 'T', '\x2', '\x2', 
		'\x244', '\x245', '\a', '\x85', '\x2', '\x2', '\x245', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x247', '\a', 'U', '\x2', '\x2', '\x247', '\x248', 
		'\a', '\x85', '\x2', '\x2', '\x248', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24A', '\a', 'V', '\x2', '\x2', '\x24A', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x24C', '\a', 'W', '\x2', '\x2', '\x24C', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\a', '\\', '\x2', '\x2', 
		'\x24E', '\x81', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', 'X', 
		'\x2', '\x2', '\x250', '\x251', '\a', '\x80', '\x2', '\x2', '\x251', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\t', '\v', '\x2', '\x2', 
		'\x253', '\x85', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\a', 'Y', 
		'\x2', '\x2', '\x255', '\x256', '\x5', 'J', '&', '\x2', '\x256', '\x257', 
		'\x5', '\x84', '\x43', '\x2', '\x257', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x259', '\a', 'Z', '\x2', '\x2', '\x259', '\x25A', '\x5', '\"', 
		'\x12', '\x2', '\x25A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', 
		'\a', '[', '\x2', '\x2', '\x25C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25E', '\a', ']', '\x2', '\x2', '\x25E', '\x25F', '\x5', '&', 
		'\x14', '\x2', '\x25F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', 
		'\a', '^', '\x2', '\x2', '\x261', '\x262', '\a', '\x85', '\x2', '\x2', 
		'\x262', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\a', '_', 
		'\x2', '\x2', '\x264', '\x265', '\a', '\x85', '\x2', '\x2', '\x265', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\a', '`', '\x2', '\x2', 
		'\x267', '\x93', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\a', '\x61', 
		'\x2', '\x2', '\x269', '\x95', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26C', 
		'\a', 'w', '\x2', '\x2', '\x26B', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\x62', '\x2', '\x2', '\x26E', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x271', '\a', 'w', '\x2', 
		'\x2', '\x270', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x272', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x273', '\a', '\x63', '\x2', '\x2', '\x273', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\x276', '\a', 'w', '\x2', '\x2', '\x275', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', '\x2', '\x2', 
		'\x2', '\x276', '\x277', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', 
		'\a', '\x64', '\x2', '\x2', '\x278', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x27B', '\a', 'w', '\x2', '\x2', '\x27A', '\x279', '\x3', '\x2', 
		'\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', '\a', '\x65', '\x2', '\x2', 
		'\x27D', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\a', '\x66', 
		'\x2', '\x2', '\x27F', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', 
		'\a', 'g', '\x2', '\x2', '\x281', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\a', 'h', '\x2', '\x2', '\x283', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x284', '\x285', '\a', 'i', '\x2', '\x2', '\x285', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x286', '\x287', '\a', 'j', '\x2', '\x2', 
		'\x287', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x288', '\x289', '\a', 'k', 
		'\x2', '\x2', '\x289', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', 
		'\a', 'l', '\x2', '\x2', '\x28B', '\x28C', '\x5', 'J', '&', '\x2', '\x28C', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', 'm', '\x2', 
		'\x2', '\x28E', '\x28F', '\x5', '\"', '\x12', '\x2', '\x28F', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\a', 'n', '\x2', '\x2', 
		'\x291', '\x292', '\x5', '\"', '\x12', '\x2', '\x292', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x294', '\a', 'o', '\x2', '\x2', '\x294', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x295', '\x296', '\t', '\f', '\x2', 
		'\x2', '\x296', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', 
		'\a', 'p', '\x2', '\x2', '\x298', '\x299', '\x5', '\xB2', 'Z', '\x2', 
		'\x299', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', 'q', 
		'\x2', '\x2', '\x29B', '\x29C', '\a', '\x85', '\x2', '\x2', '\x29C', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\a', 'r', '\x2', '\x2', 
		'\x29E', '\x29F', '\a', '\x85', '\x2', '\x2', '\x29F', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', 's', '\x2', '\x2', '\x2A1', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\a', 't', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\a', '\x85', '\x2', '\x2', '\x2A4', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', 'u', '\x2', '\x2', 
		'\x2A6', '\x2A7', '\x5', '>', ' ', '\x2', '\x2A7', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x2A8', '\x2A9', '\a', 'v', '\x2', '\x2', '\x2A9', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', 'x', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\x5', '\"', '\x12', '\x2', '\x2AC', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\a', 'y', '\x2', '\x2', '\x2AE', 
		'\x2AF', '\x5', '>', ' ', '\x2', '\x2AF', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x2B0', '\x2B1', '\a', 'z', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', 
		'>', ' ', '\x2', '\x2B2', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x2B3', 
		'\x2B4', '\a', '{', '\x2', '\x2', '\x2B4', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x2B5', '\x2B6', '\a', '|', '\x2', '\x2', '\x2B6', '\x2B7', '\x5', 
		'>', ' ', '\x2', '\x2B7', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'\x2B9', '\a', '}', '\x2', '\x2', '\x2B9', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BB', '\a', '~', '\x2', '\x2', '\x2BB', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\x7F', '\x2', '\x2', '\x2BD', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2EC', '\x5', 'n', '\x38', 
		'\x2', '\x2BF', '\x2EC', '\x5', 'p', '\x39', '\x2', '\x2C0', '\x2EC', 
		'\x5', 'r', ':', '\x2', '\x2C1', '\x2EC', '\x5', 't', ';', '\x2', '\x2C2', 
		'\x2EC', '\x5', 'v', '<', '\x2', '\x2C3', '\x2EC', '\x5', 'x', '=', '\x2', 
		'\x2C4', '\x2EC', '\x5', 'z', '>', '\x2', '\x2C5', '\x2EC', '\x5', '|', 
		'?', '\x2', '\x2C6', '\x2EC', '\x5', '~', '@', '\x2', '\x2C7', '\x2EC', 
		'\x5', '\x82', '\x42', '\x2', '\x2C8', '\x2EC', '\x5', '\x86', '\x44', 
		'\x2', '\x2C9', '\x2EC', '\x5', '\x88', '\x45', '\x2', '\x2CA', '\x2EC', 
		'\x5', '\x80', '\x41', '\x2', '\x2CB', '\x2EC', '\x5', '\x8A', '\x46', 
		'\x2', '\x2CC', '\x2EC', '\x5', '\x8C', 'G', '\x2', '\x2CD', '\x2EC', 
		'\x5', '\x8E', 'H', '\x2', '\x2CE', '\x2EC', '\x5', '\x90', 'I', '\x2', 
		'\x2CF', '\x2EC', '\x5', '\x92', 'J', '\x2', '\x2D0', '\x2EC', '\x5', 
		'\x94', 'K', '\x2', '\x2D1', '\x2EC', '\x5', '\x96', 'L', '\x2', '\x2D2', 
		'\x2EC', '\x5', '\x98', 'M', '\x2', '\x2D3', '\x2EC', '\x5', '\x9A', 'N', 
		'\x2', '\x2D4', '\x2EC', '\x5', '\x9C', 'O', '\x2', '\x2D5', '\x2EC', 
		'\x5', '\x9E', 'P', '\x2', '\x2D6', '\x2EC', '\x5', '\xA0', 'Q', '\x2', 
		'\x2D7', '\x2EC', '\x5', '\xA2', 'R', '\x2', '\x2D8', '\x2EC', '\x5', 
		'\xA4', 'S', '\x2', '\x2D9', '\x2EC', '\x5', '\xA6', 'T', '\x2', '\x2DA', 
		'\x2EC', '\x5', '\xA8', 'U', '\x2', '\x2DB', '\x2EC', '\x5', '\xAA', 'V', 
		'\x2', '\x2DC', '\x2EC', '\x5', '\xAC', 'W', '\x2', '\x2DD', '\x2EC', 
		'\x5', '\xAE', 'X', '\x2', '\x2DE', '\x2EC', '\x5', '\xB0', 'Y', '\x2', 
		'\x2DF', '\x2EC', '\x5', '\xB4', '[', '\x2', '\x2E0', '\x2EC', '\x5', 
		'\xB6', '\\', '\x2', '\x2E1', '\x2EC', '\x5', '\xB8', ']', '\x2', '\x2E2', 
		'\x2EC', '\x5', '\xBA', '^', '\x2', '\x2E3', '\x2EC', '\x5', '\xBC', '_', 
		'\x2', '\x2E4', '\x2EC', '\x5', '\xBE', '`', '\x2', '\x2E5', '\x2EC', 
		'\x5', '\xC0', '\x61', '\x2', '\x2E6', '\x2EC', '\x5', '\xC2', '\x62', 
		'\x2', '\x2E7', '\x2EC', '\x5', '\xC4', '\x63', '\x2', '\x2E8', '\x2EC', 
		'\x5', '\xCC', 'g', '\x2', '\x2E9', '\x2EC', '\x5', '\xCE', 'h', '\x2', 
		'\x2EA', '\x2EC', '\x5', '\xD0', 'i', '\x2', '\x2EB', '\x2BE', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2CC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2CE', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DE', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E1', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E6', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\xD8', '\xE7', '\xEA', '\xEE', '\xFB', 
		'\x105', '\x10E', '\x115', '\x11B', '\x120', '\x129', '\x135', '\x13D', 
		'\x141', '\x149', '\x14C', '\x160', '\x163', '\x172', '\x175', '\x17C', 
		'\x183', '\x196', '\x19D', '\x1AD', '\x1B7', '\x1C1', '\x1CC', '\x1D3', 
		'\x1E4', '\x1EC', '\x1F3', '\x1F5', '\x1FE', '\x208', '\x20B', '\x20E', 
		'\x214', '\x217', '\x21A', '\x21D', '\x230', '\x26B', '\x270', '\x275', 
		'\x27A', '\x2EB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
