//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\I525976\source\repos\HexRuntimeAssemblier\HexRuntimeAssemblier\.antlr\Assemblier.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Assemblier : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LBRACE=2, RBRACE=3, LMID=4, RMID=5, BODY_BEGIN=6, BODY_END=7, PARAM_BEGIN=8, 
		PARAM_END=9, EQ=10, DOT=11, COMMA=12, REF=13, JUNCTION=14, COLON=15, KEY_ASSEMBLY=16, 
		KEY_INTERFACE=17, KEY_CLASS=18, KEY_STRUCT=19, KEY_METHOD=20, KEY_PROPERTY=21, 
		KEY_EVENT=22, KEY_FIELD=23, KEY_INHERIT=24, KEY_IMPLEMENT=25, MODIFIER_ABSTRACT=26, 
		MODIFIER_VIRTUAL=27, MODIFIER_SEALED=28, MODIFIER_STATIC=29, MODIFIER_INSTANCE=30, 
		MODIFIER_VOLATILE=31, MODIFIER_THREAD_LOCAL=32, MODIFIER_CONSTANT=33, 
		MODIFIER_READONLY=34, MODIFIER_ATTRIBUTE=35, MODIFIER_NEST=36, MODIFIER_PUBLIC=37, 
		MODIFIER_PRIVATE=38, MODIFIER_INTERNAL=39, MODIFIER_PROTECTED=40, CTOR=41, 
		ARRAY=42, VOID=43, PRIMITIVE_INT=44, PRIMITIVE_LONG=45, PRIMITIVE_SHORT=46, 
		PRIMITIVE_BYTE=47, PRIMITIVE_CHAR=48, PRIMITIVE_STRING=49, METHOD_MANAGED=50, 
		METHOD_IMPORT=51, METHOD_LOCAL=52, METHOD_CODE=53, PROPERTY_GET=54, PROPERTY_SET=55, 
		EVENT_ADD=56, EVENT_REMOVE=57, STRING=58, HEX=59, INT=60, NUMBER=61, GUID=62, 
		IDENTIFIER=63;
	public const int
		RULE_start = 0, RULE_modifierAccess = 1, RULE_modifierLife = 2, RULE_methodArgument = 3, 
		RULE_methodArgumentList = 4, RULE_methodReturnType = 5, RULE_methodName = 6, 
		RULE_methodImport = 7, RULE_methodSource = 8, RULE_methodLocal = 9, RULE_methodLocals = 10, 
		RULE_methodCode = 11, RULE_methodIl = 12, RULE_methodLabel = 13, RULE_methodOpcodeOperand = 14, 
		RULE_methodProperty = 15, RULE_methodBody = 16, RULE_methodDef = 17, RULE_methodRef = 18, 
		RULE_fieldDef = 19, RULE_fieldRef = 20, RULE_propertyGet = 21, RULE_propertySet = 22, 
		RULE_propertyDef = 23, RULE_eventAdd = 24, RULE_eventRemove = 25, RULE_eventDef = 26, 
		RULE_typeRefList = 27, RULE_implementList = 28, RULE_typeInherit = 29, 
		RULE_assemblyRef = 30, RULE_typeName = 31, RULE_typeRef = 32, RULE_primitiveType = 33, 
		RULE_type = 34, RULE_arrayType = 35, RULE_nestArrayType = 36, RULE_multidimensionArrayType = 37, 
		RULE_interiorRefType = 38, RULE_classBody = 39, RULE_classDef = 40, RULE_propertyValue = 41, 
		RULE_propertyKey = 42, RULE_property = 43, RULE_assemblyDef = 44;
	public static readonly string[] ruleNames = {
		"start", "modifierAccess", "modifierLife", "methodArgument", "methodArgumentList", 
		"methodReturnType", "methodName", "methodImport", "methodSource", "methodLocal", 
		"methodLocals", "methodCode", "methodIl", "methodLabel", "methodOpcodeOperand", 
		"methodProperty", "methodBody", "methodDef", "methodRef", "fieldDef", 
		"fieldRef", "propertyGet", "propertySet", "propertyDef", "eventAdd", "eventRemove", 
		"eventDef", "typeRefList", "implementList", "typeInherit", "assemblyRef", 
		"typeName", "typeRef", "primitiveType", "type", "arrayType", "nestArrayType", 
		"multidimensionArrayType", "interiorRefType", "classBody", "classDef", 
		"propertyValue", "propertyKey", "property", "assemblyDef"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'='", 
		"'.'", "','", "'&'", "'::'", "':'", "'.assembly'", "'.interface'", "'.class'", 
		"'.struct'", "'.method'", "'.property'", "'.event'", "'.field'", "'inherits'", 
		"'implements'", "'abstract'", "'virtual'", "'sealed'", "'static'", "'instance'", 
		"'volatile'", "'threadlocal'", "'const'", "'readonly'", "'attribute'", 
		"'nested'", "'public'", "'private'", "'internal'", "'protected'", null, 
		"'array'", "'void'", "'int32'", "'int64'", "'int16'", "'int8'", "'char'", 
		"'string'", "'managed'", "'import'", "'.local'", "'.code'", "'.get'", 
		"'.set'", "'.add'", "'.remove'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LBRACE", "RBRACE", "LMID", "RMID", "BODY_BEGIN", "BODY_END", 
		"PARAM_BEGIN", "PARAM_END", "EQ", "DOT", "COMMA", "REF", "JUNCTION", "COLON", 
		"KEY_ASSEMBLY", "KEY_INTERFACE", "KEY_CLASS", "KEY_STRUCT", "KEY_METHOD", 
		"KEY_PROPERTY", "KEY_EVENT", "KEY_FIELD", "KEY_INHERIT", "KEY_IMPLEMENT", 
		"MODIFIER_ABSTRACT", "MODIFIER_VIRTUAL", "MODIFIER_SEALED", "MODIFIER_STATIC", 
		"MODIFIER_INSTANCE", "MODIFIER_VOLATILE", "MODIFIER_THREAD_LOCAL", "MODIFIER_CONSTANT", 
		"MODIFIER_READONLY", "MODIFIER_ATTRIBUTE", "MODIFIER_NEST", "MODIFIER_PUBLIC", 
		"MODIFIER_PRIVATE", "MODIFIER_INTERNAL", "MODIFIER_PROTECTED", "CTOR", 
		"ARRAY", "VOID", "PRIMITIVE_INT", "PRIMITIVE_LONG", "PRIMITIVE_SHORT", 
		"PRIMITIVE_BYTE", "PRIMITIVE_CHAR", "PRIMITIVE_STRING", "METHOD_MANAGED", 
		"METHOD_IMPORT", "METHOD_LOCAL", "METHOD_CODE", "PROPERTY_GET", "PROPERTY_SET", 
		"EVENT_ADD", "EVENT_REMOVE", "STRING", "HEX", "INT", "NUMBER", "GUID", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assemblier.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Assemblier() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Assemblier(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Assemblier(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public AssemblyDefContext assemblyDef() {
			return GetRuleContext<AssemblyDefContext>(0);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; assemblyDef();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT))) != 0)) {
				{
				{
				State = 91; classDef();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierAccessContext : ParserRuleContext {
		public ITerminalNode MODIFIER_PUBLIC() { return GetToken(Assemblier.MODIFIER_PUBLIC, 0); }
		public ITerminalNode MODIFIER_PRIVATE() { return GetToken(Assemblier.MODIFIER_PRIVATE, 0); }
		public ITerminalNode MODIFIER_PROTECTED() { return GetToken(Assemblier.MODIFIER_PROTECTED, 0); }
		public ITerminalNode MODIFIER_INTERNAL() { return GetToken(Assemblier.MODIFIER_INTERNAL, 0); }
		public ModifierAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterModifierAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitModifierAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierAccessContext modifierAccess() {
		ModifierAccessContext _localctx = new ModifierAccessContext(Context, State);
		EnterRule(_localctx, 2, RULE_modifierAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_PUBLIC) | (1L << MODIFIER_PRIVATE) | (1L << MODIFIER_INTERNAL) | (1L << MODIFIER_PROTECTED))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierLifeContext : ParserRuleContext {
		public ITerminalNode MODIFIER_INSTANCE() { return GetToken(Assemblier.MODIFIER_INSTANCE, 0); }
		public ITerminalNode MODIFIER_STATIC() { return GetToken(Assemblier.MODIFIER_STATIC, 0); }
		public ModifierLifeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierLife; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterModifierLife(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitModifierLife(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierLife(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierLifeContext modifierLife() {
		ModifierLifeContext _localctx = new ModifierLifeContext(Context, State);
		EnterRule(_localctx, 4, RULE_modifierLife);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==MODIFIER_STATIC || _la==MODIFIER_INSTANCE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; type();
			State = 102; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentListContext : ParserRuleContext {
		public MethodArgumentContext methodArgument() {
			return GetRuleContext<MethodArgumentContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public MethodArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentListContext methodArgumentList() {
		MethodArgumentListContext _localctx = new MethodArgumentListContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodArgumentList);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LMID:
			case ARRAY:
			case PRIMITIVE_INT:
			case PRIMITIVE_LONG:
			case PRIMITIVE_SHORT:
			case PRIMITIVE_BYTE:
			case PRIMITIVE_CHAR:
			case PRIMITIVE_STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 104; methodArgument();
				State = 105; Match(COMMA);
				State = 106; methodArgumentList();
				}
				}
				break;
			case PARAM_END:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReturnTypeContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(Assemblier.VOID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReturnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReturnTypeContext methodReturnType() {
		MethodReturnTypeContext _localctx = new MethodReturnTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodReturnType);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; Match(VOID);
				}
				break;
			case LMID:
			case ARRAY:
			case PRIMITIVE_INT:
			case PRIMITIVE_LONG:
			case PRIMITIVE_SHORT:
			case PRIMITIVE_BYTE:
			case PRIMITIVE_CHAR:
			case PRIMITIVE_STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode CTOR() { return GetToken(Assemblier.CTOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = TokenStream.LA(1);
			if ( !(_la==CTOR || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodImportContext : ParserRuleContext {
		public ITerminalNode METHOD_IMPORT() { return GetToken(Assemblier.METHOD_IMPORT, 0); }
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode[] STRING() { return GetTokens(Assemblier.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(Assemblier.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public MethodImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodImportContext methodImport() {
		MethodImportContext _localctx = new MethodImportContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(METHOD_IMPORT);
			State = 118; Match(LMID);
			State = 119; Match(STRING);
			State = 120; Match(COMMA);
			State = 121; Match(STRING);
			State = 122; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSourceContext : ParserRuleContext {
		public ITerminalNode METHOD_MANAGED() { return GetToken(Assemblier.METHOD_MANAGED, 0); }
		public MethodImportContext methodImport() {
			return GetRuleContext<MethodImportContext>(0);
		}
		public MethodSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSourceContext methodSource() {
		MethodSourceContext _localctx = new MethodSourceContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodSource);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case METHOD_MANAGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(METHOD_MANAGED);
				}
				break;
			case METHOD_IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; methodImport();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalContext : ParserRuleContext {
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalContext methodLocal() {
		MethodLocalContext _localctx = new MethodLocalContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(LMID);
			State = 129; Match(INT);
			State = 130; Match(RMID);
			State = 131; type();
			State = 132; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLocalsContext : ParserRuleContext {
		public ITerminalNode METHOD_LOCAL() { return GetToken(Assemblier.METHOD_LOCAL, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodLocalContext[] methodLocal() {
			return GetRuleContexts<MethodLocalContext>();
		}
		public MethodLocalContext methodLocal(int i) {
			return GetRuleContext<MethodLocalContext>(i);
		}
		public MethodLocalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLocals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLocals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLocals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLocals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLocalsContext methodLocals() {
		MethodLocalsContext _localctx = new MethodLocalsContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodLocals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(METHOD_LOCAL);
			State = 135; Match(BODY_BEGIN);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 136; methodLocal();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LMID );
			State = 141; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCodeContext : ParserRuleContext {
		public ITerminalNode METHOD_CODE() { return GetToken(Assemblier.METHOD_CODE, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodIlContext[] methodIl() {
			return GetRuleContexts<MethodIlContext>();
		}
		public MethodIlContext methodIl(int i) {
			return GetRuleContext<MethodIlContext>(i);
		}
		public MethodLabelContext[] methodLabel() {
			return GetRuleContexts<MethodLabelContext>();
		}
		public MethodLabelContext methodLabel(int i) {
			return GetRuleContext<MethodLabelContext>(i);
		}
		public MethodCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCodeContext methodCode() {
		MethodCodeContext _localctx = new MethodCodeContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(METHOD_CODE);
			State = 144; Match(BODY_BEGIN);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 145; methodIl();
					}
					break;
				case 2:
					{
					State = 146; methodLabel();
					}
					break;
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOT );
			State = 151; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodIlContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Assemblier.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public MethodOpcodeOperandContext[] methodOpcodeOperand() {
			return GetRuleContexts<MethodOpcodeOperandContext>();
		}
		public MethodOpcodeOperandContext methodOpcodeOperand(int i) {
			return GetRuleContext<MethodOpcodeOperandContext>(i);
		}
		public MethodIlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodIl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodIl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodIl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodIl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodIlContext methodIl() {
		MethodIlContext _localctx = new MethodIlContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodIl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(DOT);
			State = 154; Match(IDENTIFIER);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << ARRAY) | (1L << VOID) | (1L << PRIMITIVE_INT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_STRING) | (1L << STRING) | (1L << HEX) | (1L << INT) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 155; methodOpcodeOperand();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodLabelContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Assemblier.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Assemblier.COLON, 0); }
		public MethodLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodLabelContext methodLabel() {
		MethodLabelContext _localctx = new MethodLabelContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(DOT);
			State = 162; Match(IDENTIFIER);
			State = 163; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOpcodeOperandContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodOpcodeOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOpcodeOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodOpcodeOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodOpcodeOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOpcodeOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOpcodeOperandContext methodOpcodeOperand() {
		MethodOpcodeOperandContext _localctx = new MethodOpcodeOperandContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodOpcodeOperand);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(HEX);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167; Match(INT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168; Match(STRING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 169; methodRef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170; fieldRef();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 171; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPropertyContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPropertyContext methodProperty() {
		MethodPropertyContext _localctx = new MethodPropertyContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_la = TokenStream.LA(1);
			if ( !(_la==PROPERTY_GET || _la==PROPERTY_SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodCodeContext methodCode() {
			return GetRuleContext<MethodCodeContext>(0);
		}
		public MethodLocalsContext methodLocals() {
			return GetRuleContext<MethodLocalsContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==METHOD_LOCAL) {
				{
				State = 176; methodLocals();
				}
			}

			State = 179; methodCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		public ITerminalNode KEY_METHOD() { return GetToken(Assemblier.KEY_METHOD, 0); }
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public MethodReturnTypeContext methodReturnType() {
			return GetRuleContext<MethodReturnTypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public MethodSourceContext methodSource() {
			return GetRuleContext<MethodSourceContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public MethodPropertyContext methodProperty() {
			return GetRuleContext<MethodPropertyContext>(0);
		}
		public ITerminalNode MODIFIER_VIRTUAL() { return GetToken(Assemblier.MODIFIER_VIRTUAL, 0); }
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(KEY_METHOD);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET || _la==PROPERTY_SET) {
				{
				State = 182; methodProperty();
				}
			}

			State = 185; modifierAccess();
			State = 186; modifierLife();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_VIRTUAL) {
				{
				State = 187; Match(MODIFIER_VIRTUAL);
				}
			}

			State = 190; methodReturnType();
			State = 191; methodName();
			State = 192; Match(PARAM_BEGIN);
			State = 193; methodArgumentList();
			State = 194; Match(PARAM_END);
			State = 195; methodSource();
			State = 196; Match(BODY_BEGIN);
			State = 197; methodBody();
			State = 198; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodRefContext : ParserRuleContext {
		public MethodReturnTypeContext methodReturnType() {
			return GetRuleContext<MethodReturnTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode PARAM_BEGIN() { return GetToken(Assemblier.PARAM_BEGIN, 0); }
		public ITerminalNode PARAM_END() { return GetToken(Assemblier.PARAM_END, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public MethodRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMethodRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMethodRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodRefContext methodRef() {
		MethodRefContext _localctx = new MethodRefContext(Context, State);
		EnterRule(_localctx, 36, RULE_methodRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; methodReturnType();
			State = 201; typeRef();
			State = 202; Match(JUNCTION);
			State = 203; methodName();
			State = 204; Match(PARAM_BEGIN);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LMID) | (1L << ARRAY) | (1L << PRIMITIVE_INT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_STRING) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 205; type();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211; Match(PARAM_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefContext : ParserRuleContext {
		public ITerminalNode KEY_FIELD() { return GetToken(Assemblier.KEY_FIELD, 0); }
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode MODIFIER_THREAD_LOCAL() { return GetToken(Assemblier.MODIFIER_THREAD_LOCAL, 0); }
		public ITerminalNode MODIFIER_VOLATILE() { return GetToken(Assemblier.MODIFIER_VOLATILE, 0); }
		public ITerminalNode MODIFIER_CONSTANT() { return GetToken(Assemblier.MODIFIER_CONSTANT, 0); }
		public ITerminalNode MODIFIER_READONLY() { return GetToken(Assemblier.MODIFIER_READONLY, 0); }
		public FieldDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefContext fieldDef() {
		FieldDefContext _localctx = new FieldDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_fieldDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(KEY_FIELD);
			State = 214; modifierAccess();
			State = 215; modifierLife();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_THREAD_LOCAL) {
				{
				State = 216; Match(MODIFIER_THREAD_LOCAL);
				}
			}

			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_VOLATILE) | (1L << MODIFIER_CONSTANT) | (1L << MODIFIER_READONLY))) != 0)) {
				{
				State = 219;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MODIFIER_VOLATILE) | (1L << MODIFIER_CONSTANT) | (1L << MODIFIER_READONLY))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 222; type();
			State = 223; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldRefContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ITerminalNode JUNCTION() { return GetToken(Assemblier.JUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public FieldRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterFieldRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitFieldRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldRefContext fieldRef() {
		FieldRefContext _localctx = new FieldRefContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; type();
			State = 226; typeRef();
			State = 227; Match(JUNCTION);
			State = 228; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertyGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyGet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyGet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetContext propertyGet() {
		PropertyGetContext _localctx = new PropertyGetContext(Context, State);
		EnterRule(_localctx, 42, RULE_propertyGet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(PROPERTY_GET);
			State = 231; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public PropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertySet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertySet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetContext propertySet() {
		PropertySetContext _localctx = new PropertySetContext(Context, State);
		EnterRule(_localctx, 44, RULE_propertySet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(PROPERTY_SET);
			State = 234; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefContext : ParserRuleContext {
		public ITerminalNode KEY_PROPERTY() { return GetToken(Assemblier.KEY_PROPERTY, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyGetContext propertyGet() {
			return GetRuleContext<PropertyGetContext>(0);
		}
		public PropertySetContext propertySet() {
			return GetRuleContext<PropertySetContext>(0);
		}
		public PropertyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefContext propertyDef() {
		PropertyDefContext _localctx = new PropertyDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_propertyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(KEY_PROPERTY);
			State = 237; Match(BODY_BEGIN);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET) {
				{
				State = 238; propertyGet();
				}
			}

			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_SET) {
				{
				State = 241; propertySet();
				}
			}

			State = 244; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAddContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(Assemblier.PROPERTY_GET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public EventAddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAdd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventAddContext eventAdd() {
		EventAddContext _localctx = new EventAddContext(Context, State);
		EnterRule(_localctx, 48, RULE_eventAdd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(PROPERTY_GET);
			State = 247; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRemoveContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(Assemblier.PROPERTY_SET, 0); }
		public MethodRefContext methodRef() {
			return GetRuleContext<MethodRefContext>(0);
		}
		public EventRemoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRemove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventRemove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventRemove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRemove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRemoveContext eventRemove() {
		EventRemoveContext _localctx = new EventRemoveContext(Context, State);
		EnterRule(_localctx, 50, RULE_eventRemove);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(PROPERTY_SET);
			State = 250; methodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefContext : ParserRuleContext {
		public ITerminalNode KEY_EVENT() { return GetToken(Assemblier.KEY_EVENT, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public EventAddContext eventAdd() {
			return GetRuleContext<EventAddContext>(0);
		}
		public EventRemoveContext eventRemove() {
			return GetRuleContext<EventRemoveContext>(0);
		}
		public EventDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterEventDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitEventDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefContext eventDef() {
		EventDefContext _localctx = new EventDefContext(Context, State);
		EnterRule(_localctx, 52, RULE_eventDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(KEY_EVENT);
			State = 253; Match(BODY_BEGIN);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_GET) {
				{
				State = 254; eventAdd();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROPERTY_SET) {
				{
				State = 257; eventRemove();
				}
			}

			State = 260; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefListContext : ParserRuleContext {
		public TypeRefContext[] typeRef() {
			return GetRuleContexts<TypeRefContext>();
		}
		public TypeRefContext typeRef(int i) {
			return GetRuleContext<TypeRefContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Assemblier.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Assemblier.COMMA, i);
		}
		public TypeRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefListContext typeRefList() {
		TypeRefListContext _localctx = new TypeRefListContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 262; typeRef();
					State = 263; Match(COMMA);
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 270; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementListContext : ParserRuleContext {
		public ITerminalNode KEY_IMPLEMENT() { return GetToken(Assemblier.KEY_IMPLEMENT, 0); }
		public TypeRefListContext typeRefList() {
			return GetRuleContext<TypeRefListContext>(0);
		}
		public ImplementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterImplementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitImplementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementListContext implementList() {
		ImplementListContext _localctx = new ImplementListContext(Context, State);
		EnterRule(_localctx, 56, RULE_implementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(KEY_IMPLEMENT);
			State = 273; typeRefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInheritContext : ParserRuleContext {
		public ITerminalNode KEY_INHERIT() { return GetToken(Assemblier.KEY_INHERIT, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public TypeInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInheritContext typeInherit() {
		TypeInheritContext _localctx = new TypeInheritContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(KEY_INHERIT);
			State = 276; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyRefContext : ParserRuleContext {
		public ITerminalNode LMID() { return GetToken(Assemblier.LMID, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public ITerminalNode RMID() { return GetToken(Assemblier.RMID, 0); }
		public AssemblyRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterAssemblyRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitAssemblyRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyRefContext assemblyRef() {
		AssemblyRefContext _localctx = new AssemblyRefContext(Context, State);
		EnterRule(_localctx, 60, RULE_assemblyRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(LMID);
			State = 279; Match(IDENTIFIER);
			State = 280; Match(RMID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Assemblier.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Assemblier.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Assemblier.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Assemblier.DOT, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 282; Match(IDENTIFIER);
					State = 283; Match(DOT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 288; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public AssemblyRefContext assemblyRef() {
			return GetRuleContext<AssemblyRefContext>(0);
		}
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LMID) {
				{
				State = 290; assemblyRef();
				}
			}

			State = 293; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode PRIMITIVE_INT() { return GetToken(Assemblier.PRIMITIVE_INT, 0); }
		public ITerminalNode PRIMITIVE_LONG() { return GetToken(Assemblier.PRIMITIVE_LONG, 0); }
		public ITerminalNode PRIMITIVE_SHORT() { return GetToken(Assemblier.PRIMITIVE_SHORT, 0); }
		public ITerminalNode PRIMITIVE_BYTE() { return GetToken(Assemblier.PRIMITIVE_BYTE, 0); }
		public ITerminalNode PRIMITIVE_CHAR() { return GetToken(Assemblier.PRIMITIVE_CHAR, 0); }
		public ITerminalNode PRIMITIVE_STRING() { return GetToken(Assemblier.PRIMITIVE_STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIMITIVE_INT) | (1L << PRIMITIVE_LONG) | (1L << PRIMITIVE_SHORT) | (1L << PRIMITIVE_BYTE) | (1L << PRIMITIVE_CHAR) | (1L << PRIMITIVE_STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public InteriorRefTypeContext interiorRefType() {
			return GetRuleContext<InteriorRefTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 297; primitiveType();
				}
				break;
			case 2:
				{
				State = 298; typeRef();
				}
				break;
			case 3:
				{
				State = 299; arrayType();
				}
				break;
			case 4:
				{
				State = 300; interiorRefType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public NestArrayTypeContext nestArrayType() {
			return GetRuleContext<NestArrayTypeContext>(0);
		}
		public MultidimensionArrayTypeContext multidimensionArrayType() {
			return GetRuleContext<MultidimensionArrayTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_arrayType);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; nestArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; multidimensionArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestArrayTypeContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public NestArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterNestArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitNestArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestArrayTypeContext nestArrayType() {
		NestArrayTypeContext _localctx = new NestArrayTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_nestArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(ARRAY);
			State = 308; Match(LBRACE);
			State = 309; type();
			State = 310; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultidimensionArrayTypeContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(Assemblier.ARRAY, 0); }
		public ITerminalNode LBRACE() { return GetToken(Assemblier.LBRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Assemblier.COMMA, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public ITerminalNode RBRACE() { return GetToken(Assemblier.RBRACE, 0); }
		public MultidimensionArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multidimensionArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterMultidimensionArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitMultidimensionArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultidimensionArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultidimensionArrayTypeContext multidimensionArrayType() {
		MultidimensionArrayTypeContext _localctx = new MultidimensionArrayTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_multidimensionArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(ARRAY);
			State = 313; Match(LBRACE);
			State = 314; type();
			State = 315; Match(COMMA);
			State = 316; Match(INT);
			State = 317; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteriorRefTypeContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(Assemblier.REF, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public InteriorRefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interiorRefType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterInteriorRefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitInteriorRefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteriorRefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteriorRefTypeContext interiorRefType() {
		InteriorRefTypeContext _localctx = new InteriorRefTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_interiorRefType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMITIVE_INT:
			case PRIMITIVE_LONG:
			case PRIMITIVE_SHORT:
			case PRIMITIVE_BYTE:
			case PRIMITIVE_CHAR:
			case PRIMITIVE_STRING:
				{
				State = 319; primitiveType();
				}
				break;
			case LMID:
			case IDENTIFIER:
				{
				State = 320; typeRef();
				}
				break;
			case ARRAY:
				{
				State = 321; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 324; Match(REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public MethodDefContext[] methodDef() {
			return GetRuleContexts<MethodDefContext>();
		}
		public MethodDefContext methodDef(int i) {
			return GetRuleContext<MethodDefContext>(i);
		}
		public PropertyDefContext[] propertyDef() {
			return GetRuleContexts<PropertyDefContext>();
		}
		public PropertyDefContext propertyDef(int i) {
			return GetRuleContext<PropertyDefContext>(i);
		}
		public EventDefContext[] eventDef() {
			return GetRuleContexts<EventDefContext>();
		}
		public EventDefContext eventDef(int i) {
			return GetRuleContext<EventDefContext>(i);
		}
		public FieldDefContext[] fieldDef() {
			return GetRuleContexts<FieldDefContext>();
		}
		public FieldDefContext fieldDef(int i) {
			return GetRuleContext<FieldDefContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT) | (1L << KEY_METHOD) | (1L << KEY_PROPERTY) | (1L << KEY_EVENT) | (1L << KEY_FIELD))) != 0)) {
				{
				State = 331;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KEY_METHOD:
					{
					State = 326; methodDef();
					}
					break;
				case KEY_PROPERTY:
					{
					State = 327; propertyDef();
					}
					break;
				case KEY_EVENT:
					{
					State = 328; eventDef();
					}
					break;
				case KEY_FIELD:
					{
					State = 329; fieldDef();
					}
					break;
				case KEY_INTERFACE:
				case KEY_CLASS:
				case KEY_STRUCT:
					{
					State = 330; classDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ModifierAccessContext modifierAccess() {
			return GetRuleContext<ModifierAccessContext>(0);
		}
		public ModifierLifeContext modifierLife() {
			return GetRuleContext<ModifierLifeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public ITerminalNode KEY_STRUCT() { return GetToken(Assemblier.KEY_STRUCT, 0); }
		public ITerminalNode KEY_CLASS() { return GetToken(Assemblier.KEY_CLASS, 0); }
		public ITerminalNode KEY_INTERFACE() { return GetToken(Assemblier.KEY_INTERFACE, 0); }
		public ITerminalNode MODIFIER_NEST() { return GetToken(Assemblier.MODIFIER_NEST, 0); }
		public ITerminalNode MODIFIER_ATTRIBUTE() { return GetToken(Assemblier.MODIFIER_ATTRIBUTE, 0); }
		public TypeInheritContext typeInherit() {
			return GetRuleContext<TypeInheritContext>(0);
		}
		public ImplementListContext implementList() {
			return GetRuleContext<ImplementListContext>(0);
		}
		public ITerminalNode MODIFIER_ABSTRACT() { return GetToken(Assemblier.MODIFIER_ABSTRACT, 0); }
		public ITerminalNode MODIFIER_SEALED() { return GetToken(Assemblier.MODIFIER_SEALED, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 80, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEY_INTERFACE) | (1L << KEY_CLASS) | (1L << KEY_STRUCT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_NEST) {
				{
				State = 337; Match(MODIFIER_NEST);
				}
			}

			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_ATTRIBUTE) {
				{
				State = 340; Match(MODIFIER_ATTRIBUTE);
				}
			}

			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIFIER_ABSTRACT || _la==MODIFIER_SEALED) {
				{
				State = 343;
				_la = TokenStream.LA(1);
				if ( !(_la==MODIFIER_ABSTRACT || _la==MODIFIER_SEALED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 346; modifierAccess();
			State = 347; modifierLife();
			State = 348; typeName();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_INHERIT) {
				{
				State = 349; typeInherit();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_IMPLEMENT) {
				{
				State = 352; implementList();
				}
			}

			State = 355; Match(BODY_BEGIN);
			State = 356; classBody();
			State = 357; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(Assemblier.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(Assemblier.NUMBER, 0); }
		public ITerminalNode GUID() { return GetToken(Assemblier.GUID, 0); }
		public ITerminalNode HEX() { return GetToken(Assemblier.HEX, 0); }
		public ITerminalNode INT() { return GetToken(Assemblier.INT, 0); }
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_propertyValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << HEX) | (1L << INT) | (1L << NUMBER) | (1L << GUID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyKeyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Assemblier.IDENTIFIER, 0); }
		public PropertyKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterPropertyKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitPropertyKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyKeyContext propertyKey() {
		PropertyKeyContext _localctx = new PropertyKeyContext(Context, State);
		EnterRule(_localctx, 84, RULE_propertyKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public PropertyKeyContext propertyKey() {
			return GetRuleContext<PropertyKeyContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(Assemblier.EQ, 0); }
		public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 86, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; propertyKey();
			State = 364; Match(EQ);
			State = 365; propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyDefContext : ParserRuleContext {
		public ITerminalNode KEY_ASSEMBLY() { return GetToken(Assemblier.KEY_ASSEMBLY, 0); }
		public ITerminalNode BODY_BEGIN() { return GetToken(Assemblier.BODY_BEGIN, 0); }
		public ITerminalNode BODY_END() { return GetToken(Assemblier.BODY_END, 0); }
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public AssemblyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.EnterAssemblyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblierListener typedListener = listener as IAssemblierListener;
			if (typedListener != null) typedListener.ExitAssemblyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblierVisitor<TResult> typedVisitor = visitor as IAssemblierVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyDefContext assemblyDef() {
		AssemblyDefContext _localctx = new AssemblyDefContext(Context, State);
		EnterRule(_localctx, 88, RULE_assemblyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(KEY_ASSEMBLY);
			State = 368; Match(BODY_BEGIN);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 369; property();
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 374; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x17B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '_', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x62', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'p', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 't', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x81', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\x8C', 
		'\n', '\f', '\r', '\f', '\xE', '\f', '\x8D', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\x96', 
		'\n', '\r', '\r', '\r', '\xE', '\r', '\x97', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x9F', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xA2', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xAF', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x5', 
		'\x12', '\xB4', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xBA', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xBF', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\xD1', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xD4', 
		'\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xDC', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xDF', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\xF2', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\xF5', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x102', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x105', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x10C', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x10F', '\v', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x6', '!', '\x11F', '\n', '!', '\r', '!', 
		'\xE', '!', '\x120', '\x3', '!', '\x3', '!', '\x3', '\"', '\x5', '\"', 
		'\x126', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x130', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x5', '%', '\x134', '\n', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x145', '\n', '(', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\a', ')', '\x14E', '\n', ')', '\f', ')', '\xE', ')', '\x151', '\v', ')', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x155', '\n', '*', '\x3', '*', '\x5', 
		'*', '\x158', '\n', '*', '\x3', '*', '\x5', '*', '\x15B', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x161', '\n', '*', 
		'\x3', '*', '\x5', '*', '\x164', '\n', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x6', '.', '\x175', '\n', '.', '\r', '.', '\xE', '.', '\x176', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x2', '\x2', '/', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\x2', '\v', '\x3', '\x2', '\'', 
		'*', '\x3', '\x2', '\x1F', ' ', '\x4', '\x2', '+', '+', '\x41', '\x41', 
		'\x3', '\x2', '\x38', '\x39', '\x4', '\x2', '!', '!', '#', '$', '\x3', 
		'\x2', '.', '\x33', '\x3', '\x2', '\x13', '\x15', '\x4', '\x2', '\x1C', 
		'\x1C', '\x1E', '\x1E', '\x3', '\x2', '<', '@', '\x2', '\x179', '\x2', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x4', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x65', '\x3', '\x2', '\x2', '\x2', '\b', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'o', '\x3', '\x2', '\x2', '\x2', '\f', 's', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'u', '\x3', '\x2', '\x2', '\x2', '\x10', 'w', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x82', '\x3', '\x2', '\x2', '\x2', '\x16', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x91', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xAE', '\x3', '\x2', '\x2', '\x2', ' ', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xB3', '\x3', '\x2', '\x2', '\x2', '$', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xCA', '\x3', '\x2', '\x2', '\x2', '(', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xE3', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '.', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x32', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x38', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x112', '\x3', '\x2', '\x2', '\x2', '<', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x118', '\x3', '\x2', '\x2', '\x2', '@', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x129', '\x3', '\x2', '\x2', '\x2', '\x46', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x133', '\x3', '\x2', '\x2', '\x2', 'J', '\x135', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x144', '\x3', '\x2', '\x2', '\x2', 'P', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x152', '\x3', '\x2', '\x2', '\x2', 'T', '\x169', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x16D', '\x3', '\x2', '\x2', '\x2', 'Z', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\\', '`', '\x5', 'Z', '.', '\x2', ']', '_', '\x5', 'R', 
		'*', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\t', '\x2', 
		'\x2', '\x2', '\x64', '\x5', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\t', '\x3', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x5', '\x46', '$', '\x2', 'h', 'i', '\a', '\x41', '\x2', '\x2', 
		'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '\b', '\x5', '\x2', 
		'k', 'l', '\a', '\xE', '\x2', '\x2', 'l', 'm', '\x5', '\n', '\x6', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'j', '\x3', '\x2', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', '\v', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\a', '-', '\x2', '\x2', 
		'r', 't', '\x5', '\x46', '$', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\t', '\x4', '\x2', '\x2', 'v', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\a', '\x35', '\x2', '\x2', 'x', 'y', '\a', '\x6', 
		'\x2', '\x2', 'y', 'z', '\a', '<', '\x2', '\x2', 'z', '{', '\a', '\xE', 
		'\x2', '\x2', '{', '|', '\a', '<', '\x2', '\x2', '|', '}', '\a', '\a', 
		'\x2', '\x2', '}', '\x11', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\a', 
		'\x34', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x10', '\t', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x13', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x6', '\x2', '\x2', '\x83', '\x84', '\a', '>', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\a', '\x2', '\x2', '\x85', '\x86', '\x5', '\x46', '$', 
		'\x2', '\x86', '\x87', '\a', '\x41', '\x2', '\x2', '\x87', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x36', '\x2', '\x2', '\x89', 
		'\x8B', '\a', '\b', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x14', '\v', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\t', '\x2', '\x2', '\x90', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\x37', '\x2', '\x2', '\x92', 
		'\x95', '\a', '\b', '\x2', '\x2', '\x93', '\x96', '\x5', '\x1A', '\xE', 
		'\x2', '\x94', '\x96', '\x5', '\x1C', '\xF', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\t', '\x2', '\x2', '\x9A', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '\r', '\x2', 
		'\x2', '\x9C', '\xA0', '\a', '\x41', '\x2', '\x2', '\x9D', '\x9F', '\x5', 
		'\x1E', '\x10', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\r', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x41', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', '\x11', '\x2', '\x2', '\xA6', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xAF', '\a', '=', '\x2', '\x2', '\xA8', 
		'\xAF', '\a', '?', '\x2', '\x2', '\xA9', '\xAF', '\a', '>', '\x2', '\x2', 
		'\xAA', '\xAF', '\a', '<', '\x2', '\x2', '\xAB', '\xAF', '\x5', '&', '\x14', 
		'\x2', '\xAC', '\xAF', '\x5', '*', '\x16', '\x2', '\xAD', '\xAF', '\x5', 
		'\x46', '$', '\x2', '\xAE', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\t', '\x5', '\x2', '\x2', '\xB1', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\x16', '\f', '\x2', '\xB3', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x5', 
		'\x18', '\r', '\x2', '\xB6', '#', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB9', '\a', '\x16', '\x2', '\x2', '\xB8', '\xBA', '\x5', ' ', '\x11', 
		'\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\x5', '\x4', '\x3', '\x2', '\xBC', '\xBE', '\x5', '\x6', '\x4', 
		'\x2', '\xBD', '\xBF', '\a', '\x1D', '\x2', '\x2', '\xBE', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\f', '\a', 
		'\x2', '\xC1', '\xC2', '\x5', '\xE', '\b', '\x2', '\xC2', '\xC3', '\a', 
		'\n', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\n', '\x6', '\x2', '\xC4', 
		'\xC5', '\a', '\v', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x12', '\n', 
		'\x2', '\xC6', '\xC7', '\a', '\b', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'\"', '\x12', '\x2', '\xC8', '\xC9', '\a', '\t', '\x2', '\x2', '\xC9', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\f', '\a', '\x2', 
		'\xCB', '\xCC', '\x5', '\x42', '\"', '\x2', '\xCC', '\xCD', '\a', '\x10', 
		'\x2', '\x2', '\xCD', '\xCE', '\x5', '\xE', '\b', '\x2', '\xCE', '\xD2', 
		'\a', '\n', '\x2', '\x2', '\xCF', '\xD1', '\x5', '\x46', '$', '\x2', '\xD0', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\v', '\x2', 
		'\x2', '\xD6', '\'', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\x19', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x4', '\x3', '\x2', '\xD9', 
		'\xDB', '\x5', '\x6', '\x4', '\x2', '\xDA', '\xDC', '\a', '\"', '\x2', 
		'\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDF', '\t', '\x6', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '\x46', '$', '\x2', '\xE1', 
		'\xE2', '\a', '\x41', '\x2', '\x2', '\xE2', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x5', '\x46', '$', '\x2', '\xE4', '\xE5', '\x5', 
		'\x42', '\"', '\x2', '\xE5', '\xE6', '\a', '\x10', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\x41', '\x2', '\x2', '\xE7', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\a', '\x38', '\x2', '\x2', '\xE9', '\xEA', '\x5', 
		'&', '\x14', '\x2', '\xEA', '-', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\a', '\x39', '\x2', '\x2', '\xEC', '\xED', '\x5', '&', '\x14', '\x2', 
		'\xED', '/', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x17', 
		'\x2', '\x2', '\xEF', '\xF1', '\a', '\b', '\x2', '\x2', '\xF0', '\xF2', 
		'\x5', ',', '\x17', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF5', '\x5', '.', '\x18', '\x2', '\xF4', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\t', 
		'\x2', '\x2', '\xF7', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\a', '\x38', '\x2', '\x2', '\xF9', '\xFA', '\x5', '&', '\x14', '\x2', 
		'\xFA', '\x33', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x39', 
		'\x2', '\x2', '\xFC', '\xFD', '\x5', '&', '\x14', '\x2', '\xFD', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x18', '\x2', '\x2', 
		'\xFF', '\x101', '\a', '\b', '\x2', '\x2', '\x100', '\x102', '\x5', '\x32', 
		'\x1A', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x105', '\x5', '\x34', '\x1B', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', 
		'\t', '\x2', '\x2', '\x107', '\x37', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\x5', '\x42', '\"', '\x2', '\x109', '\x10A', '\a', '\xE', '\x2', 
		'\x2', '\x10A', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x5', '\x42', 
		'\"', '\x2', '\x111', '\x39', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\x1B', '\x2', '\x2', '\x113', '\x114', '\x5', '\x38', '\x1D', '\x2', 
		'\x114', ';', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\x1A', 
		'\x2', '\x2', '\x116', '\x117', '\x5', '\x42', '\"', '\x2', '\x117', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\x6', '\x2', '\x2', 
		'\x119', '\x11A', '\a', '\x41', '\x2', '\x2', '\x11A', '\x11B', '\a', 
		'\a', '\x2', '\x2', '\x11B', '?', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\a', '\x41', '\x2', '\x2', '\x11D', '\x11F', '\a', '\r', '\x2', 
		'\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\a', '\x41', '\x2', '\x2', '\x123', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x124', '\x126', '\x5', '>', ' ', 
		'\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\x5', '@', '!', '\x2', '\x128', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x129', '\x12A', '\t', '\a', '\x2', '\x2', '\x12A', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x130', '\x5', '\x44', '#', '\x2', 
		'\x12C', '\x130', '\x5', '\x42', '\"', '\x2', '\x12D', '\x130', '\x5', 
		'H', '%', '\x2', '\x12E', '\x130', '\x5', 'N', '(', '\x2', '\x12F', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x130', 'G', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x134', '\x5', 'J', '&', '\x2', '\x132', '\x134', '\x5', 'L', '\'', '\x2', 
		'\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x134', 'I', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\a', ',', '\x2', '\x2', '\x136', '\x137', '\a', '\x4', '\x2', 
		'\x2', '\x137', '\x138', '\x5', '\x46', '$', '\x2', '\x138', '\x139', 
		'\a', '\x5', '\x2', '\x2', '\x139', 'K', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13B', '\a', ',', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x4', '\x2', 
		'\x2', '\x13C', '\x13D', '\x5', '\x46', '$', '\x2', '\x13D', '\x13E', 
		'\a', '\xE', '\x2', '\x2', '\x13E', '\x13F', '\a', '>', '\x2', '\x2', 
		'\x13F', '\x140', '\a', '\x5', '\x2', '\x2', '\x140', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x145', '\x5', '\x44', '#', '\x2', '\x142', '\x145', 
		'\x5', '\x42', '\"', '\x2', '\x143', '\x145', '\x5', 'H', '%', '\x2', 
		'\x144', '\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\a', '\xF', '\x2', 
		'\x2', '\x147', 'O', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14E', '\x5', 
		'$', '\x13', '\x2', '\x149', '\x14E', '\x5', '\x30', '\x19', '\x2', '\x14A', 
		'\x14E', '\x5', '\x36', '\x1C', '\x2', '\x14B', '\x14E', '\x5', '(', '\x15', 
		'\x2', '\x14C', '\x14E', '\x5', 'R', '*', '\x2', '\x14D', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', 
		'\t', '\b', '\x2', '\x2', '\x153', '\x155', '\a', '&', '\x2', '\x2', '\x154', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', 
		'\a', '%', '\x2', '\x2', '\x157', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15B', '\t', '\t', '\x2', '\x2', '\x15A', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x5', '\x4', '\x3', '\x2', '\x15D', '\x15E', '\x5', '\x6', '\x4', '\x2', 
		'\x15E', '\x160', '\x5', '@', '!', '\x2', '\x15F', '\x161', '\x5', '<', 
		'\x1F', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x164', '\x5', ':', '\x1E', '\x2', '\x163', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', 
		'\b', '\x2', '\x2', '\x166', '\x167', '\x5', 'P', ')', '\x2', '\x167', 
		'\x168', '\a', '\t', '\x2', '\x2', '\x168', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16A', '\t', '\n', '\x2', '\x2', '\x16A', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\a', '\x41', '\x2', '\x2', '\x16C', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x5', 'V', ',', '\x2', 
		'\x16E', '\x16F', '\a', '\f', '\x2', '\x2', '\x16F', '\x170', '\x5', 'T', 
		'+', '\x2', '\x170', 'Y', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', 
		'\a', '\x12', '\x2', '\x2', '\x172', '\x174', '\a', '\b', '\x2', '\x2', 
		'\x173', '\x175', '\x5', 'X', '-', '\x2', '\x174', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\a', 
		'\t', '\x2', '\x2', '\x179', '[', '\x3', '\x2', '\x2', '\x2', '#', '`', 
		'o', 's', '\x80', '\x8D', '\x95', '\x97', '\xA0', '\xAE', '\xB3', '\xB9', 
		'\xBE', '\xD2', '\xDB', '\xDE', '\xF1', '\xF4', '\x101', '\x104', '\x10D', 
		'\x120', '\x125', '\x12F', '\x133', '\x144', '\x14D', '\x14F', '\x154', 
		'\x157', '\x15A', '\x160', '\x163', '\x176',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
